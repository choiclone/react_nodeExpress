[{"D:\\react_nodeExpress\\demo\\src\\index.js":"1","D:\\react_nodeExpress\\demo\\src\\reportWebVitals.js":"2","D:\\react_nodeExpress\\demo\\src\\App.js":"3","D:\\react_nodeExpress\\demo\\src\\list\\StationArriveBusInfo.jsx":"4","D:\\react_nodeExpress\\demo\\src\\list\\StationListF.jsx":"5","D:\\react_nodeExpress\\demo\\src\\list\\StationList.jsx":"6","D:\\react_nodeExpress\\demo\\src\\search\\BusStationSearch.js":"7","D:\\react_nodeExpress\\demo\\src\\busInfo\\BusStationList.jsx":"8","D:\\react_nodeExpress\\demo\\src\\search\\BusRouteSearch.js":"9","D:\\react_nodeExpress\\demo\\src\\busInfo\\BusArriveList.jsx":"10","D:\\react_nodeExpress\\demo\\src\\search\\ComponentSearch.js":"11","D:\\react_nodeExpress\\demo\\src\\script\\useInterval.js":"12","D:\\react_nodeExpress\\demo\\src\\script\\BusRouteModal.js":"13","D:\\react_nodeExpress\\demo\\src\\module\\consonantSearch.js":"14","D:\\react_nodeExpress\\demo\\src\\list\\RouteInfoList.jsx":"15","D:\\react_nodeExpress\\demo\\src\\script\\BusStationModal.js":"16","D:\\react_nodeExpress\\demo\\src\\search\\SubwaySearch.js":"17","D:\\react_nodeExpress\\demo\\src\\module\\ImageZoomInOut.js":"18","D:\\react_nodeExpress\\demo\\src\\script\\KakaoMapScript.js":"19"},{"size":372,"mtime":1664346116097,"results":"20","hashOfConfig":"21"},{"size":375,"mtime":1653014409772,"results":"22","hashOfConfig":"21"},{"size":933,"mtime":1664438497127,"results":"23","hashOfConfig":"21"},{"size":2928,"mtime":1658973837435,"results":"24","hashOfConfig":"21"},{"size":1334,"mtime":1655877837178,"results":"25","hashOfConfig":"21"},{"size":519,"mtime":1653528798670,"results":"26","hashOfConfig":"21"},{"size":3916,"mtime":1664439439091,"results":"27","hashOfConfig":"21"},{"size":2072,"mtime":1658973761264,"results":"28","hashOfConfig":"21"},{"size":10114,"mtime":1664417310182,"results":"29","hashOfConfig":"21"},{"size":4302,"mtime":1657159269547,"results":"30","hashOfConfig":"21"},{"size":13186,"mtime":1664439279697,"results":"31","hashOfConfig":"21"},{"size":534,"mtime":1653960037187,"results":"32","hashOfConfig":"21"},{"size":1609,"mtime":1655856175526,"results":"33","hashOfConfig":"21"},{"size":1435,"mtime":1655439836598,"results":"34","hashOfConfig":"21"},{"size":2159,"mtime":1655424830013,"results":"35","hashOfConfig":"21"},{"size":1172,"mtime":1655866725998,"results":"36","hashOfConfig":"21"},{"size":6216,"mtime":1656916058759,"results":"37","hashOfConfig":"21"},{"size":15439,"mtime":1658224901617,"results":"38","hashOfConfig":"21"},{"size":16092,"mtime":1658994433970,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"1nrqkqm",{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"43"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"43"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"43"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"43"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"43"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"43"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"43"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"43"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"43"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"43"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"43"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":2,"source":"109","usedDeprecatedRules":"43"},"D:\\react_nodeExpress\\demo\\src\\index.js",[],[],[],"D:\\react_nodeExpress\\demo\\src\\reportWebVitals.js",[],[],"D:\\react_nodeExpress\\demo\\src\\App.js",["110","111","112"],[],"D:\\react_nodeExpress\\demo\\src\\list\\StationArriveBusInfo.jsx",["113","114","115","116","117"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport styled from 'styled-components';\r\n\r\nimport BusStationList from '../busInfo/BusStationList';\r\nimport BusArriveList from '../busInfo/BusArriveList';\r\n\r\nimport { useLocation } from 'react-router';\r\nimport { createBrowserHistory } from \"history\"\r\n\r\nconst StationArriveBusInfo = () => {\r\n    const { stNm, arsId, busRouteType, searchType } = useLocation().state;\r\n\r\n    const [infoTyped, setInfoTyped] = useState(1)\r\n    const [BusStation, setBusStation] = useState(<BusArriveList stNm={stNm} arsId={arsId} busRouteType={busRouteType}></BusArriveList>);\r\n    const [BusStationLists, setBusStationLists] = useState([]);\r\n\r\n    useEffect(() => {\r\n        let BusList = [];\r\n        axios.post(\"/api/ArriveBusList\", { arsID: arsId })\r\n            .then((res) => {\r\n                if (res.data.code === 200) {\r\n                    BusList.push(res.data.arrive[\"ServiceResult\"][\"msgBody\"][\"itemList\"]);\r\n                    if (Array.isArray(BusList[0])) setBusStationLists(BusList[0][0]);\r\n                    else setBusStationLists(BusList[0]);\r\n                }\r\n            })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (stNm !== \"\") {\r\n            let stations = JSON.parse(localStorage.getItem('stations') || '[]')\r\n            const newKeyword = {\r\n                id: arsId,\r\n                Nm: String(stNm)\r\n            }\r\n            const distinctStation = stations.filter((rmStation) => {\r\n                return rmStation.id === arsId\r\n            });\r\n            if (distinctStation.length === 0) {\r\n                stations.push(newKeyword)\r\n                localStorage.setItem('stations', JSON.stringify(stations))\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    const BusInfoFunc = (infoType) => {\r\n        const infoTypes = infoType;\r\n        setInfoTyped(infoType);\r\n        switch (infoTypes) {\r\n            case 0: {\r\n                setBusStation(<BusStationList stNm={stNm} arsId={arsId} busRouteType={busRouteType} stations={BusStationLists}></BusStationList>);\r\n                break;\r\n            }\r\n            case 1: {\r\n                setBusStation(<BusArriveList stNm={stNm} arsId={arsId} busRouteType={busRouteType}></BusArriveList>);\r\n                break;\r\n            }\r\n            default: {\r\n                alert(\"프론트앤드 에러다 미안하다\");\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <StationInfoDiv>\r\n                <button type=\"button\" onClick={() => BusInfoFunc(0)}>정류소 위치</button>\r\n                <button type=\"button\" onClick={() => BusInfoFunc(1)}>도착 버스 정보 목록</button>\r\n                {BusStation}\r\n            </StationInfoDiv>\r\n        </>\r\n    );\r\n}\r\n\r\nconst StationInfoDiv = styled.div`\r\n    width: 70%;\r\n    margin: auto;\r\n    text-align: center;\r\n`;\r\n\r\nexport default StationArriveBusInfo;","D:\\react_nodeExpress\\demo\\src\\list\\StationListF.jsx",["118","119","120"],[],"/*global kakao*/\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport BusRouteSearch from '../search/BusRouteSearch';\r\nimport BusStationSearch from '../search/BusStationSearch';\r\nimport SubwaySearch from '../search/SubwaySearch';\r\n\r\nconst StationListF = () => {\r\n  const [infoType, setInfoType] = useState('Bus');\r\n\r\n  const ChangeSearchInfo = (info) => {\r\n    switch (info) {\r\n      case \"Bus\": {\r\n        setInfoType(info);\r\n        break;\r\n      }\r\n      case \"Station\": {\r\n        setInfoType(info);\r\n        break;\r\n      }\r\n      case \"Subway\": {\r\n        setInfoType(info);\r\n        break;\r\n      }\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <header className='main-header'>\r\n        <div>\r\n          <button onClick={() => ChangeSearchInfo(\"Bus\")}>버스</button>\r\n          <button onClick={() => ChangeSearchInfo(\"Station\")}>정류소</button>\r\n          <button onClick={() => ChangeSearchInfo(\"Subway\")}>지하철</button>\r\n        </div>\r\n      </header>\r\n      <div className='main-fullScreen'>\r\n        <section className='main-content'>\r\n            {\r\n              infoType === \"Bus\" ? <BusRouteSearch /> : infoType === \"Station\" ? <BusStationSearch /> : <SubwaySearch />\r\n            }\r\n        </section>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default StationListF;","D:\\react_nodeExpress\\demo\\src\\list\\StationList.jsx",["121","122","123"],[],"import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst StationList = () => {\r\n  const [station, setStation] = useState('');\r\n\r\n  const handleStation = (e) => {\r\n    setStation(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <input type=\"text\" name='stationName' onChange={handleStation}></input>\r\n          { station }\r\n        </header>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default StationList;","D:\\react_nodeExpress\\demo\\src\\search\\BusStationSearch.js",["124","125","126","127"],[],"D:\\react_nodeExpress\\demo\\src\\busInfo\\BusStationList.jsx",["128","129","130","131","132","133","134","135","136","137","138","139","140","141","142"],[],"/*global kakao*/\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport BusRoutModal from '../script/BusRouteModal';\r\nimport useInterval from '../script/useInterval';\r\nimport KakaoMapScript from '../script/KakaoMapScript';\r\nimport axios from 'axios';\r\n\r\nconst BusStationList = (props) => {\r\n    const { stNm, arsId, busRouteType, stations } = props;\r\n    const [BusStation, setBusStation] = useState([]);\r\n    const [BusRoute, setBusRoute] = useState([]);\r\n    const [stateTitle, setStateTitle] = useState('결과 없음');\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n    const [routeId, setRouteId] = useState(0);\r\n\r\n    const openModal = async (routeId) => {\r\n        let BusList = [];\r\n        await axios.post(\"/api/ArrInfoByRouteList\", { busRouteId: routeId })\r\n            .then((res) => {\r\n                if (res.data.code === 200) {\r\n                    setRouteId(routeId)\r\n                    BusList.push(res.data.allRoute[\"ServiceResult\"][\"msgBody\"][\"itemList\"]);\r\n                    if (Array.isArray(BusList[0])) setBusRoute(BusList[0]);\r\n                    else setBusRoute(BusList);\r\n                    setModalOpen(true);\r\n                }\r\n            }).catch((err) => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const closeModal = () => {\r\n        setModalOpen(false);\r\n    }\r\n\r\n    const reloadModal = async () => {\r\n        let BusList = [];\r\n        await axios.post(\"/api/ArrInfoByRouteList\", { busRouteId: routeId })\r\n            .then((res) => {\r\n                if (res.data.code === 200) {\r\n                    BusList.push(res.data.allRoute[\"ServiceResult\"][\"msgBody\"][\"itemList\"]);\r\n                    if (Array.isArray(BusList[0])) setBusRoute(BusList[0]);\r\n                    else setBusRoute(BusList);\r\n                }\r\n            }).catch((err) => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <KakaoMapScript searchTitle={stNm} arsID={arsId} stationList={stations}/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default BusStationList;","D:\\react_nodeExpress\\demo\\src\\search\\BusRouteSearch.js",["143","144","145","146","147","148","149","150"],[],"/*global kakao*/\r\nimport React, { useState, useEffect, useRef, useMemo } from 'react';\r\nimport { debounce } from 'lodash';\r\nimport SearchComponent from './ComponentSearch';\r\nimport \"../css/Search.css\";\r\nimport axios from 'axios';\r\n\r\nconst BusRouteSearch = () => {\r\n    const [busName, setBusName] = useState('');\r\n    const [stateTitle, setStateTitle] = useState('Click Bus');\r\n    const [busSearch, setBusSearch] = useState('');\r\n    const [busRouted, setBusRouted] = useState([]);\r\n    const [busRouteId, setBusRouteId] = useState([]);\r\n    const [busReloadInfo, setBusReloadInfo] = useState([]);\r\n    const [busLocate, setBusLocate] = useState([]);\r\n    const [busRoute, setBusRoute] = useState([]);\r\n    const [arrive, setArrive] = useState([]);\r\n    const [routes, setRoutes] = useState(JSON.parse(localStorage.getItem('routes') || '[]'));\r\n\r\n    const IntervalRef = useRef();\r\n    const inputRef = useRef();\r\n\r\n    const stationType = { 0: \"공용 버스\", 1: \"일반형 시내/ 농어촌버스\", 2: \"좌석형 시내 / 농어촌버스\", 3: \"직행좌석형 시내 / 농어촌버스\", 4: \"일반형 시외버스\", 5: \"좌석형 시외버스\", 6: \"고속형 시외버스\", 7: \"마을버스\" }\r\n    const routeType = { 1: \"공항\", 2: \"마을\", 3: \"간선\", 4: \"지선\", 5: \"순환\", 6: \"광역\", 7: \"인천\", 8: \"경기\", 9: \"폐지\", 0: \"공용\" }\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('routes', JSON.stringify(routes));\r\n    }, [routes]);\r\n\r\n    useEffect(() => {\r\n        return () => clearInterval(IntervalRef.current);\r\n    }, []);\r\n\r\n    const SearchRoute = (e) => {\r\n        axios.get(`/api/RouteSearch?busName=${busName}`)\r\n            .then((res) => {\r\n                if (res.data.status === 200) {\r\n                    const {route} = res.data;\r\n                    let routeObj = route[0]\r\n                    let item = [];\r\n                    if(route.length !== 0){\r\n                        item.push({ Nm: routeObj[\"노선명\"], Id: routeObj[\"ROUTE_ID\"], Begin: routeObj[\"기점\"], End: routeObj[\"종점\"] });\r\n                        IntervalStationList(item[0]);\r\n                    }\r\n                } else clearInterval(IntervalRef.current);\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n                clearInterval(IntervalRef.current);\r\n            });\r\n        e.preventDefault();\r\n    }\r\n\r\n    const BusRouteStatusList = async (routeId) => {\r\n        let BusList = [];\r\n        setStateTitle(\"가져오는 중...\")\r\n        await axios.post(\"/api/ArrInfoByRouteList\", { busRouteId: routeId })\r\n            .then((res) => {\r\n                if (res.data.code === 200) {\r\n                    BusList.push(res.data.allRoute[\"ServiceResult\"][\"msgBody\"][\"itemList\"]);\r\n                    if (Array.isArray(BusList[0])) setBusRoute(BusList[0]);\r\n                    else setBusRoute(BusList);\r\n                }\r\n            }).catch((err) => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const getBusPosByRtidList = async (routeId) => {\r\n        let BusList = [];\r\n        await axios.post(\"/api/getBusPosByRtidList\", { busRouteId: routeId })\r\n            .then((res) => {\r\n                if (res.data.code === 200) {\r\n                    BusList.push(res.data.BusLocate[\"ServiceResult\"][\"msgBody\"][\"itemList\"]);\r\n                    if (Array.isArray(BusList[0])) setBusLocate(BusList[0]);\r\n                    else setBusLocate(BusList);\r\n                }\r\n            }).catch((err) => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const getBusArrInfo = async (arsId) => {\r\n        let BusList = [];\r\n        await axios.post(\"/api/ArriveBusList\", { arsID: arsId })\r\n            .then((res) => {\r\n                if (res.data.code === 200) {\r\n                    BusList.push(res.data.arrive[\"ServiceResult\"][\"msgBody\"][\"itemList\"]);\r\n                    if (Array.isArray(BusList[0])) {\r\n                        setArrive(BusList[0])\r\n                    } else {\r\n                        setArrive(BusList)\r\n                    }\r\n                }\r\n            }).catch((err) => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const debounceSearch = useMemo(() => debounce((BusName) => {\r\n        axios.get(`/api/BusListSearch?busName=${BusName}`)\r\n            .then((res) => {\r\n                if (res.data.status === 200) {\r\n                    const {routeId} = res.data\r\n                    if(routeId.length !== 0){\r\n                        console.log(routeId)\r\n                        setBusRouteId(routeId);\r\n                    }\r\n                } else setBusRouteId(res.data.routeId);\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n                setBusRouteId([]);\r\n            });\r\n    }, 200), [busName]);\r\n\r\n    const handleBus = (e) => {\r\n        if (e.target.value !== '') setStateTitle(\"Click Bus\");\r\n        else setStateTitle(\"\");\r\n        setBusSearch(\"\");\r\n        setBusRoute([]);\r\n        setBusReloadInfo([]);\r\n        setBusLocate([]);\r\n        setArrive([]);\r\n        clearInterval(IntervalRef.current);\r\n        setBusName(e.target.value);\r\n        debounceSearch(e.target.value);\r\n    }\r\n\r\n    const IntervalStationList = (item, state=undefined) => {\r\n        clearInterval(IntervalRef.current);\r\n        if(state!==\"reload\") setBusRoute([]);\r\n        setArrive([]);\r\n        const Nm = item.Nm;\r\n        let id = item.Id;\r\n        const newKeyword = {\r\n            id: id,\r\n            Nm: Nm,\r\n            \"기점\": item.Begin,\r\n            \"종점\": item.End\r\n        };\r\n        console.log(newKeyword)\r\n        \r\n        const distinctRoute = routes.filter((rmRoute) => {\r\n            return rmRoute.id === id\r\n        });\r\n        if(distinctRoute.length === 0) setRoutes([newKeyword, ...routes]);\r\n        setBusName('');\r\n        setBusRouteId([]);\r\n        setBusReloadInfo({\"노선명\": Nm, \"ROUTE_ID\":id, \"기점\": item.Begin, \"종점\": item.End});\r\n        setBusSearch(Nm);\r\n        BusRouteStatusList(id);\r\n        getBusPosByRtidList(id);\r\n        IntervalRef.current = setInterval(async () => {\r\n            await BusRouteStatusList(id);\r\n            await getBusPosByRtidList(id);\r\n        }, 3000);\r\n    }\r\n\r\n    const allRemoveStorage = (id) => {\r\n        localStorage.removeItem(\"routes\");\r\n        setRoutes([]);\r\n    }\r\n\r\n    const singleRemoveStorage = (id) => {\r\n        const removeRoute = routes.filter((rmRoute) => {\r\n            return rmRoute.id !== id\r\n        })\r\n        setRoutes(removeRoute)\r\n    }\r\n\r\n    const ReloadRoute = (Nm, id, itemList) => {\r\n        let item = [];\r\n        item.push({\r\n            Nm: Nm, \r\n            Id: id,\r\n            Begin: itemList[\"기점\"],\r\n            End: itemList[\"종점\"]\r\n        });\r\n        IntervalStationList(item[0], \"reload\");\r\n    }\r\n\r\n    const styleSheet = {\r\n        fontSize: \"15px\",\r\n        color: \"green\",\r\n        listStyle: \"none\"\r\n    };\r\n\r\n    const verticalStyle = {\r\n        verticalAlign: \"middle\",\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='map-search'>\r\n                <SearchComponent \r\n                    SearchInfo={SearchRoute} \r\n                    handleSearch={handleBus} \r\n                    buttonTitle={\"노선명\"} \r\n                    autoInfo={routes} \r\n                    allRemoveStorage={allRemoveStorage}\r\n                    singleRemoveStorage={singleRemoveStorage}\r\n                    intervalInfo={IntervalStationList}\r\n                    autoCompleteList={busRouteId}\r\n                    searchTitle={busName}\r\n                    searchIdType={\"ROUTE_ID\"}\r\n                />\r\n                {\r\n                    arrive.length !== 0 ?\r\n                        <div>\r\n                            {stationType[arrive[0].stationTp[\"_text\"]]}\r\n                            {arrive.map((item, key) => (\r\n                                <ol key={key}>\r\n                                    <li>{String(busSearch) === String(item.rtNm[\"_text\"]) ?\r\n                                        <span style={{ color: \"red\" }}>{item.rtNm[\"_text\"] + \"/\" + routeType[item.routeType[\"_text\"]] + \"버스\"}</span>\r\n                                        : item.rtNm[\"_text\"] + \"/\" + routeType[item.routeType[\"_text\"]] + \"버스\"}</li>\r\n                                    <li>{item.arrmsg1[\"_text\"]}</li>\r\n                                    <li>{item.arrmsg2[\"_text\"]}</li>\r\n                                </ol>\r\n                            ))}\r\n                        </div> : \"\"\r\n                }\r\n                {busRoute.length !== 0 ?\r\n                    <div>\r\n                        <h5> {busSearch} 운행 개수: {busLocate.length !== 0 ? busLocate.length + \"개\" : \"\"}</h5>\r\n                        <ul style={styleSheet}>\r\n                            {\r\n                                busRoute.map((route, key) => (\r\n                                    <li key={key} style={verticalStyle}>\r\n                                        <button style={verticalStyle} onClick={() => getBusArrInfo(route.arsId[\"_text\"])}>{route.stNm[\"_text\"]}</button>\r\n                                        {\r\n                                            busLocate.findIndex(loc => loc.lastStnId[\"_text\"] === route.stId[\"_text\"]) !== -1 ?\r\n                                                <img style={verticalStyle} src='/staticFolder/busImages/bus.png' width=\"50px\" height=\"50px\" /> : \"\"\r\n                                        }\r\n                                    </li>\r\n                                ))\r\n                            }\r\n                            <li>\r\n                                <button onClick={(e) => ReloadRoute(busReloadInfo[\"노선명\"], busReloadInfo[\"ROUTE_ID\"], busReloadInfo)}>\r\n                                    <img src=\"/staticFolder/busImages/reload.png\" width=\"40px\" height=\"40px\" />\r\n                                </button>\r\n                            </li>\r\n                        </ul>\r\n                    </div> : \"\"\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default BusRouteSearch;","D:\\react_nodeExpress\\demo\\src\\busInfo\\BusArriveList.jsx",["151","152"],[],"import React, { useState, useEffect, useRef } from 'react';\r\nimport useInterval from '../script/useInterval';\r\nimport axios from 'axios';\r\n\r\nconst BusArriveList = (props) => {\r\n    const { stNm, arsId, busRouteType } = props;\r\n    const [arrive, setArrive] = useState([]);\r\n    const [stateTitle, setStateTitle] = useState('결과 없음');\r\n\r\n    useEffect(() => {\r\n        ArriveBusListInfo();\r\n    }, []);\r\n\r\n    useInterval(() => {\r\n        ArriveBusListInfo();\r\n    }, 3000);\r\n\r\n    const ArriveBusListInfo = async (e) => {\r\n        let BusList = [];\r\n        setStateTitle('로딩 중...');\r\n        await axios.post(\"/api/ArriveBusList\", { arsID: arsId })\r\n            .then((res) => {\r\n                if (res.data.code === 200) {\r\n\r\n                    BusList.push(res.data.arrive[\"ServiceResult\"][\"msgBody\"][\"itemList\"]);\r\n                    if (Array.isArray(BusList[0])) {\r\n                        setArrive(BusList[0])\r\n                    } else {\r\n                        setArrive(BusList)\r\n                    }\r\n                    setStateTitle('검색완료');\r\n                } else {\r\n                    setStateTitle('결과 없음');\r\n                }\r\n            }).catch((err) => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const StationTime = (seconds) => {\r\n        let hour = parseInt(seconds/3600);\r\n        let min = parseInt((seconds/60)%60);\r\n        if(hour === 0) return min === 0 ? \"\" : min+\"분\";\r\n        else return hour+\":\"+min+\"분\"\r\n    }\r\n\r\n    const BusPosition = (arrmsg) => {\r\n        return arrmsg.split(\"[\")[1] === undefined ? arrmsg.split(\"[\")[0]+\"]\" : arrmsg.split(\"[\")[1]\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <h2>정류소 고유번호에 해당하는 정류소의 도착버스 정보 조회/도착 버스 개수: {arrive.length} / {stNm}</h2>\r\n                    {\r\n                        arrive.length !== 0 ?\r\n                            <table>\r\n                                <thead>\r\n                                    <tr>\r\n                                        {/* <th>노선 ID</th> */}\r\n                                        <th>버스명</th>\r\n                                        <th>정류소 명</th>\r\n                                        <td>노선 유형</td>\r\n                                        <td>방향</td>\r\n                                        <td>첫번째 도착 예정 버스</td>\r\n                                        <td>두번째 도착 예정 버스</td>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {\r\n                                        arrive.map((item, key) => (\r\n                                            <tr key={key}>\r\n                                                {/* <td>{item.busRouteId[\"_text\"]}</td> */}\r\n                                                <td>{item.rtNm[\"_text\"]}</td>\r\n                                                <td>{item.stNm[\"_text\"]}</td>\r\n                                                <td>{busRouteType[item.routeType[\"_text\"]]}</td>\r\n                                                <td>{item.adirection[\"_text\"]}</td>\r\n                                                <td>\r\n                                                    {\r\n                                                        StationTime(item.traTime1[\"_text\"])+\"[\"+BusPosition(item.arrmsg1[\"_text\"])\r\n                                                    }\r\n                                                </td>\r\n                                                <td>\r\n                                                    {StationTime(item.traTime2[\"_text\"])+\"[\"+BusPosition(item.arrmsg2[\"_text\"])}\r\n                                                </td>\r\n                                            </tr>\r\n                                        ))\r\n                                    }\r\n                                </tbody>\r\n                            </table>\r\n                            : <h5>{stateTitle}</h5>\r\n                    }\r\n                </header>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default BusArriveList;","D:\\react_nodeExpress\\demo\\src\\search\\ComponentSearch.js",["153","154","155","156","157","158"],[],"D:\\react_nodeExpress\\demo\\src\\script\\useInterval.js",["159","160"],[],"import React, { useState, useEffect, useRef } from 'react';\r\n\r\nconst useInterval = (callback, delay) => {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n\r\nexport default useInterval;","D:\\react_nodeExpress\\demo\\src\\script\\BusRouteModal.js",["161","162","163","164","165","166","167","168"],[],"import React, { useState, useEffect, useRef } from 'react';\r\nimport \"../css/Modal.css\";\r\nimport useInterval from './useInterval';\r\nimport axios from 'axios';\r\n\r\nconst BusRouteModal = (props) => {\r\n  const { open, close, reload, header, BusRoute, routeId } = props;\r\n  const [BusRouteList, setBusRouteList] = useState([]);\r\n  const reloadImg = require('../images/reload.png')\r\n\r\n  return (\r\n    // 모달이 열릴때 openModal 클래스가 생성된다.\r\n    <div className={open ? 'openModal modal' : 'modal'}>\r\n      {open ? (\r\n        <section>\r\n          <header>\r\n            <button className=\"Reload\" onClick={reload}>\r\n              <img src={reloadImg} width=\"15px\" height={\"15px\"}></img>\r\n            </button>\r\n            {header}\r\n            <button className=\"close\" onClick={close}>\r\n              &times;\r\n            </button>\r\n          </header>\r\n          <main>\r\n            {\r\n              BusRoute.length !== 0 ?\r\n                <div className='BusRouteMain'>\r\n                  {BusRoute.map((item, key) => (\r\n                    <ul className='BusRouteName' key={key}>\r\n                      <li>\r\n                        {item.stNm[\"_text\"]}\r\n                        <ul className='BusRouteMsg'>\r\n                          <li>{item.arrmsg1[\"_text\"]}</li>\r\n                          <li>{item.arrmsg2[\"_text\"]}</li>\r\n                        </ul>\r\n                      </li>\r\n                    </ul>\r\n                  ))}\r\n                </div> : \"\"\r\n            }\r\n          </main>\r\n        </section>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BusRouteModal;","D:\\react_nodeExpress\\demo\\src\\module\\consonantSearch.js",[],[],"D:\\react_nodeExpress\\demo\\src\\list\\RouteInfoList.jsx",["169","170"],[],"import React, { useState, useEffect } from 'react';\r\nimport BusStationList from '../busInfo/BusStationList';\r\nimport BusArriveList from '../busInfo/BusArriveList';\r\nimport { useLocation } from 'react-router';\r\n\r\nconst RouteInfoList = () => {\r\n    const { stNm, arsId, busRouteType, searchType } = useLocation().state;\r\n    const [BusStation, setBusStation] = useState(<BusStationList arsId={arsId} busRouteType={busRouteType}></BusStationList>);\r\n\r\n    useEffect(() => {\r\n        if (stNm !== \"\") {\r\n            let stations = JSON.parse(localStorage.getItem('stations') || '[]')\r\n            const newKeyword = {\r\n                id: arsId,\r\n                Nm: String(stNm)\r\n            }\r\n            const distinctStation = stations.filter((rmStation) => {\r\n                return rmStation.id === arsId\r\n            });\r\n            if (distinctStation.length === 0) {\r\n                stations.push(newKeyword)\r\n                localStorage.setItem('stations', JSON.stringify(stations))\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    const BusInfoFunc = (infoType) => {\r\n        const infoTypes = infoType;\r\n        switch (infoTypes) {\r\n            case 0: {\r\n                setBusStation(<BusStationList arsId={arsId} busRouteType={busRouteType}></BusStationList>);\r\n                break;\r\n            }\r\n            case 1: {\r\n                setBusStation(<BusArriveList arsId={arsId} busRouteType={busRouteType}></BusArriveList>);\r\n                break;\r\n            }\r\n            default: {\r\n                alert(\"프론트앤드 에러다 미안하다\");\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <div>\r\n                        <button type=\"button\" onClick={() => BusInfoFunc(0)}>버스 정보 목록</button>\r\n                        <button type=\"button\" onClick={() => BusInfoFunc(1)}>도착 버스 정보 목록</button>\r\n                        {BusStation}\r\n                    </div>\r\n                </header>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default RouteInfoList;","D:\\react_nodeExpress\\demo\\src\\script\\BusStationModal.js",["171","172","173"],[],"import React, { useState, useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst BusStationModal = (props) => {\r\n    const { open, close, detailStation, stationInfo, intervalInfo } = props;\r\n\r\n    return (\r\n        // 모달이 열릴때 openModal 클래스가 생성된다.\r\n        <div className={open ? 'openModal modal' : 'modal'}>\r\n            {open ? (\r\n                <section>\r\n                    <header>\r\n                        상세보기\r\n                        <button className=\"close\" onClick={close}>\r\n                            &times;\r\n                        </button>\r\n                    </header>\r\n                    <DetailList>\r\n                        {\r\n                            // String(detailStation[\"nxtStn\"][\"_text\"])\r\n                            String(detailStation)+\"방면\"\r\n                        }\r\n                        <button onClick={() => intervalInfo(stationInfo)}>눌러</button>\r\n                    </DetailList>\r\n                </section>\r\n            ) : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst DetailList = styled.main`\r\n    color: black;\r\n`\r\n\r\nexport default BusStationModal;","D:\\react_nodeExpress\\demo\\src\\search\\SubwaySearch.js",[],[],"D:\\react_nodeExpress\\demo\\src\\module\\ImageZoomInOut.js",["174","175","176","177","178","179"],[],"import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst SCROLL_SENSITIVITY = 0.0005;\r\nconst MAX_ZOOM = 5;\r\nconst MIN_ZOOM = 0.5;\r\n\r\nconst ImageZoomInOut = (props) => {\r\n    const [subInfo, setSubInfo] = useState([]);\r\n    const [subInfos, setSubInfos] = useState([]);\r\n    const [subwayId, setSubwayId] = useState('');\r\n    const [openModal, setOpenModal] = useState(false);\r\n\r\n    const canvasRef = useRef();\r\n    const gkhead = new Image();\r\n\r\n    const clamp = (num, min, max) => Math.min(Math.max(num, min), max);\r\n\r\n    useEffect(() => {\r\n        if (canvasRef.current === undefined) return;\r\n        let canvas = canvasRef.current;\r\n\r\n        gkhead.src = \"https://upload.wikimedia.org/wikipedia/commons/8/85/Seoul_subway_linemap_ko.svg\";\r\n        gkhead.width = 5000;\r\n        gkhead.height = 6000;\r\n\r\n        let ctx = canvas.getContext('2d');\r\n        gkhead.onload = function () {\r\n            ctx.drawImage(gkhead, canvas.width - gkhead.width/2, canvas.height - gkhead.height/2);\r\n        }\r\n        axios.get(\"/api/ReadLinePos\")\r\n            .then((res) => {\r\n                let arcs = [];\r\n                const Data = res.data.test;\r\n\r\n                const imgPosX = canvas.width - gkhead.width/2;\r\n                const imgPosY = canvas.height - gkhead.height/2;\r\n\r\n                gkhead.onload = () => {\r\n                    arcs = [];\r\n                    ctx.drawImage(gkhead, imgPosX, imgPosY);\r\n                    Data.map((item, key) => {\r\n                        arcs.push(new arc(item.subwayCode, item.subwayStation, (item.PosX + imgPosX), (item.PosY + imgPosY), item.lineName, item.lineId));\r\n                    })\r\n                    ctx.closePath();\r\n                }\r\n                trackTransforms(ctx);\r\n\r\n                const arc = (() => {\r\n                    function arc(code, name, x, y, line, subId, fill, stroke) {\r\n                        this.x = (x - 10);\r\n                        this.y = (y - 10);\r\n                        this.width = 20;\r\n                        this.height = 20;\r\n                        this.name = name;\r\n                        this.code = code\r\n                        this.line = line;\r\n                        this.subId = subId;\r\n                        this.fill = fill || \"white\";\r\n                        this.stroke = stroke || \"black\";\r\n                        this.redraws(this.x, this.y);\r\n                        return (this);\r\n                    }\r\n\r\n                    arc.prototype.redraws = function (x, y) {\r\n                        this.x = x || this.x;\r\n                        this.y = y || this.y;\r\n                        this.draw(this.stroke);\r\n                        return (this);\r\n                    }\r\n\r\n                    arc.prototype.highlight = function (x, y) {\r\n                        this.x = x || this.x;\r\n                        this.y = y || this.y;\r\n                        this.draw(\"green\");\r\n                        return (this);\r\n                    }\r\n\r\n                    arc.prototype.draw = function (stroke) {\r\n                        ctx.beginPath();\r\n                        ctx.fillStyle = this.fill;\r\n                        ctx.strokeStyle = stroke;\r\n                        ctx.lineWidth = 5;\r\n                        ctx.arc(this.x + 10, this.y + 10, 15, 0, Math.PI * 2, true);\r\n                        // ctx.rect(this.x, this.y, this.width, this.height);\r\n                        ctx.stroke();\r\n                        ctx.fill();\r\n                    }\r\n\r\n                    arc.prototype.isPointInside = function (x, y) {\r\n                        return (x >= this.x && x <= this.x + this.width && y >= this.y && y <= this.y + this.height);\r\n                    }\r\n\r\n                    return arc;\r\n                })();\r\n\r\n                let lastX = canvas.width / 2, lastY = canvas.height / 2;\r\n\r\n                let dragStart; \r\n                let dragged;\r\n\r\n                function redraw(w, h) {\r\n                    arcs = [];\r\n                    let imgW = gkhead.width\r\n                    let imgH = gkhead.height\r\n                    let p1 = ctx.transformedPoint(0, 0);\r\n                    let p2 = ctx.transformedPoint(imgW, imgH);\r\n                    ctx.clearRect(p1.x, p1.y, p2.x - p1.x, p2.y - p1.y);\r\n\r\n                    ctx.save();\r\n                    ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n                    ctx.clearRect(0, 0, imgW, imgH);\r\n                    ctx.restore();\r\n\r\n                    if(w !== undefined && h !== undefined){\r\n                        imgW = w;\r\n                        imgH = h;\r\n                    }\r\n\r\n                    ctx.drawImage(gkhead, imgPosX, imgPosY);\r\n                    Data.map((item) => {\r\n                        arcs.push(new arc(item.subwayCode, item.subwayStation, (item.PosX + imgPosX), (item.PosY + imgPosY), item.lineName, item.lineId));\r\n                    })\r\n                    ctx.closePath();\r\n                }\r\n                redraw();\r\n\r\n                canvas.addEventListener('mousedown', (evt) => {\r\n                    document.body.style.mozUserSelect = document.body.style.webkitUserSelect = document.body.style.userSelect = 'none';\r\n                    lastX = evt.offsetX || (evt.pageX - canvas.offsetLeft);\r\n                    lastY = evt.offsetY || (evt.pageY - canvas.offsetTop);\r\n                    if (\"which\" in evt) {\r\n                        if (evt.which === 3) {\r\n                            PositionCretae(evt.clientX, evt.clientY)\r\n                        } else {\r\n                            dragStart = ctx.transformedPoint(lastX, lastY);\r\n                            dragged = false;\r\n                        }\r\n                    }\r\n                }, false);\r\n\r\n                canvas.addEventListener('contextmenu', (evt) => evt.preventDefault());\r\n\r\n                canvas.addEventListener(\"mouseleave\", () => {\r\n                    dragStart = null;\r\n                    dragged = false;\r\n                }, false);\r\n\r\n                canvas.addEventListener('mousemove', (evt) => {\r\n                    lastX = evt.offsetX || (evt.pageX - canvas.offsetLeft);\r\n                    lastY = evt.offsetY || (evt.pageY - canvas.offsetTop);\r\n                    var pt = ctx.transformedPoint(lastX, lastY);\r\n                    for (var i = 0; i < arcs.length; i++) {\r\n                        if (arcs[i].isPointInside(pt.x, pt.y)) {\r\n                            arcs[i].highlight();\r\n                        } else {\r\n                            arcs[i].redraws();\r\n                        }\r\n                    }\r\n                    dragged = true;\r\n                    if (dragStart) {\r\n                        var pt = ctx.transformedPoint(lastX, lastY);\r\n                        ctx.translate(pt.x - dragStart.x, pt.y - dragStart.y);\r\n                        redraw();\r\n                    }\r\n                }, false);\r\n\r\n                canvas.addEventListener('mouseup', () => { dragStart = null }, false);\r\n\r\n                canvas.addEventListener('click', (evt) => {\r\n                    var clicked = \"\";\r\n                    lastX = evt.offsetX || (evt.pageX - canvas.offsetLeft);\r\n                    lastY = evt.offsetY || (evt.pageY - canvas.offsetTop);\r\n                    var pt = ctx.transformedPoint(lastX, lastY);\r\n                    for (var i = 0; i < arcs.length; i++) {\r\n                        if (arcs[i].isPointInside(pt.x, pt.y)) {\r\n                            clicked += arcs[i].name + \"_\" + arcs[i].code + \"_\" + arcs[i].line + \"_\" + arcs[i].subId + \"_\";\r\n                        }\r\n                    }\r\n                    if (clicked.length > 0) {\r\n                        ImagePosition(clicked);\r\n                    }\r\n                }, false);\r\n\r\n                const zoom = (factors) => {\r\n                    var pt = ctx.transformedPoint(lastX, lastY);\r\n                    ctx.translate(pt.x, pt.y);\r\n                    ctx.scale(factors, factors);\r\n                    ctx.translate(-pt.x, -pt.y);\r\n                    redraw();\r\n                }\r\n\r\n                const handleScroll = (e) => {\r\n                    let y = e.wheelDeltaY;\r\n                    var delta = y ? y / 40 : e.detail ? -e.detail : 0;\r\n                    // if (delta) \r\n                    if (y > 0) {\r\n                        zoom(clamp((1 + y * SCROLL_SENSITIVITY), MIN_ZOOM, MAX_ZOOM));\r\n                    }\r\n                  \r\n                    if (y < 0) {\r\n                        zoom(clamp((1 + y * SCROLL_SENSITIVITY), MIN_ZOOM, MAX_ZOOM));\r\n                    }\r\n                    return e.preventDefault() && false;\r\n                };\r\n\r\n                canvas.addEventListener('DOMMouseScroll', handleScroll, false);\r\n                canvas.addEventListener('mousewheel', handleScroll, false);\r\n\r\n                function trackTransforms(ctx) {\r\n                    var svg = document.createElementNS(\"http://www.w3.org/2000/svg\", 'svg');\r\n                    var xform = svg.createSVGMatrix();\r\n                    ctx.getTransform = function () { return xform; };\r\n\r\n                    var savedTransforms = [];\r\n                    var save = ctx.save;\r\n                    ctx.save = function () {\r\n                        savedTransforms.push(xform.translate(0, 0));\r\n                        return save.call(ctx);\r\n                    };\r\n\r\n                    var restore = ctx.restore;\r\n                    ctx.restore = function () {\r\n                        xform = savedTransforms.pop();\r\n                        return restore.call(ctx);\r\n                    };\r\n\r\n                    var scale = ctx.scale;\r\n                    ctx.scale = function (sx, sy) {\r\n                        xform = xform.scaleNonUniform(sx, sy);\r\n                        return scale.call(ctx, sx, sy);\r\n                    };\r\n\r\n                    var rotate = ctx.rotate;\r\n                    ctx.rotate = function (radians) {\r\n                        xform = xform.rotate(radians * 180 / Math.PI);\r\n                        return rotate.call(ctx, radians);\r\n                    };\r\n\r\n                    var translate = ctx.translate;\r\n                    ctx.translate = function (dx, dy) {\r\n                        xform = xform.translate(dx, dy);\r\n                        return translate.call(ctx, dx, dy);\r\n                    };\r\n\r\n                    var transform = ctx.transform;\r\n                    ctx.transform = function (a, b, c, d, e, f) {\r\n                        var m2 = svg.createSVGMatrix();\r\n                        m2.a = a; m2.b = b; m2.c = c; m2.d = d; m2.e = e; m2.f = f;\r\n                        xform = xform.multiply(m2);\r\n                        return transform.call(ctx, a, b, c, d, e, f);\r\n                    };\r\n\r\n                    var setTransform = ctx.setTransform;\r\n                    ctx.setTransform = function (a, b, c, d, e, f) {\r\n                        xform.a = a;\r\n                        xform.b = b;\r\n                        xform.c = c;\r\n                        xform.d = d;\r\n                        xform.e = e;\r\n                        xform.f = f;\r\n                        return setTransform.call(ctx, a, b, c, d, e, f);\r\n                    };\r\n\r\n                    var pt = svg.createSVGPoint();\r\n                    ctx.transformedPoint = function (x, y) {\r\n                        pt.x = x; pt.y = y;\r\n                        return pt.matrixTransform(xform.inverse());\r\n                    }\r\n                }\r\n            }).catch((err) => {\r\n                console.log(err)\r\n            });\r\n\r\n    }, [canvasRef]);\r\n\r\n    document.addEventListener('contextmenu', (evt) => {\r\n        evt.preventDefault()\r\n    })\r\n\r\n    const PositionCretae = async (x, y) => {\r\n        console.log(x, y);\r\n    }\r\n\r\n    const ImagePosition = async (clickList) => {\r\n        setSubInfos([])\r\n        setSubwayId('')\r\n        const subwayName = clickList.split(\"_\")[0];\r\n        const subwayCode = clickList.split(\"_\")[1].split(\",\");\r\n        const subwayLine = clickList.split(\"_\")[2].split(\",\");\r\n        const subwayId = clickList.split(\"_\")[3].split(\",\");\r\n\r\n        let list = [];\r\n        list.push({\r\n            name: subwayName,\r\n            codes: subwayCode,\r\n            lines: subwayLine,\r\n            subIds: subwayId,\r\n        });\r\n        await setTimeout(() => {\r\n            setSubInfo(list);\r\n            setOpenModal(true);\r\n            axios.post(\"/api/SubwayLiveList\", { stationName: subwayName })\r\n                .then((res) => {\r\n                    if (res.data.code === 200) {\r\n                        setSubInfos(res.data.subwayList[\"realtimeArrivalList\"]);\r\n                    }\r\n                }).catch((err) => {\r\n                    console.error(err);\r\n                })\r\n        }, 100);\r\n    }\r\n\r\n    const LineInfo = (code) => {\r\n        setSubwayId(code);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={'map-subway-div'}>\r\n                <canvas\r\n                    className='map-canvasImg'\r\n                    width={1000}\r\n                    height={600}\r\n                    ref={canvasRef}\r\n                />\r\n                {\r\n                    openModal ?\r\n                        <div className='canvas-modal-back'>\r\n                            <div className='canvas-modal-front'>\r\n                                <div className='map-header-modal'>\r\n                                    <i className='fa fa-close' onClick={() => setOpenModal(false)} />\r\n                                </div>\r\n                                <div>\r\n                                    {\r\n                                        subInfo.length !== 0 ?\r\n                                            Object.keys(subInfo).map((item, key) => (\r\n                                                <div key={key}>\r\n                                                    {subInfo[item].name}\r\n                                                    <div>{\r\n                                                        subInfo[item].codes.map((i, key) => (\r\n                                                            <button key={key} onClick={() => LineInfo(subInfo[item].subIds[key])}>{subInfo[item].lines[key]}</button>\r\n                                                        ))\r\n                                                    }</div>\r\n                                                </div>\r\n                                            )) : \"\"\r\n                                    }\r\n                                    {\r\n                                        subInfos.length !== 0 ?\r\n                                            subInfos.map((item, key) => (\r\n                                                subwayId === '' ? \"\" : subwayId === item.subwayId ? <p key={key}>{item.subwayId}/{item.statnFid}/{item.statnTid}/{item.updnLine}</p> : \"\"\r\n\r\n                                            )) : \"\"\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        : \"\"\r\n                }\r\n                {/* <form>\r\n                    <input type=\"text\"></input>\r\n                    <input type=\"text\"></input>\r\n                    <button type=\"submit\">길찾기</button>\r\n                </form> */}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ImageZoomInOut;","D:\\react_nodeExpress\\demo\\src\\script\\KakaoMapScript.js",["180","181","182","183","184"],[],"/*global kakao*/\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\nimport \"../css/Kakao.css\"\r\n\r\nconst KakaoMapScript = ({ searchTitle, arsID, stationList }) => {\r\n    const [radiusSelect, setRadiusSelect] = useState(1);\r\n    const [searchTitles, setSearchTitles] = useState(\"\");\r\n    const [openPopUp, setOpenPopUp] = useState(false); \r\n    const [openSearchPopUp, setOpenSearchPopUp] = useState(false);\r\n    const [markersA2, setMarkersA2] = useState([]);\r\n    const [searchLeng, setSearchLeng] =useState(0);\r\n    const [placePopUp, setPlacePopUp] = useState({\r\n        addressName: \"\",\r\n        placeName: \"\",\r\n        x: 0,\r\n        y: 0\r\n    });\r\n\r\n    const Options = [\r\n        { radius: 1 },\r\n        { radius: 3 },\r\n        { radius: 5 },\r\n    ]\r\n\r\n    const CatePlace = [\r\n        {name:\"은행\", id: \"bank\"}, \r\n        {name:\"지하철\", id: \"train\"}, \r\n        {name:\"약국\", id: \"pharmacy\"},\r\n        {name:\"마트\", id: \"mart\"}, \r\n        {name:\"카페\", id: \"cafe\"}, \r\n        {name:\"편의점\", id: \"store\"}, \r\n        {name:\"병원\", id: \"store\"}, \r\n    ];\r\n\r\n    const mapRef = useRef();\r\n    const TmapRef = useRef();\r\n    const markerRef = useRef();\r\n    const placeRef = useRef();\r\n\r\n    \r\n    let markers2 = [], // 마커를 담을 배열입니다\r\n    currCategory = ''; // 현재 선택된 카테고리를 가지고 있을 변수입니다\r\n\r\n    useEffect(() => {\r\n        let placeOverlay = new kakao.maps.CustomOverlay({zIndex:1}), \r\n        contentNode = document.createElement('div'),\r\n        markers = [];\r\n\r\n        const container = document.getElementById('map');\r\n        const options = {\r\n            center: new kakao.maps.LatLng(stationList[\"gpsY\"][\"_text\"], stationList[\"gpsX\"][\"_text\"]),\r\n            level: 5,\r\n        };\r\n\r\n        contentNode.className = \"placeinfo_wrap\"\r\n\r\n        addEventHandle(contentNode, 'mousedown', kakao.maps.event.preventMap);\r\n        addEventHandle(contentNode, 'touchstart', kakao.maps.event.preventMap);\r\n        \r\n        placeOverlay.setContent(contentNode);\r\n\r\n        addCategoryClickEvent();\r\n\r\n        mapRef.current = new kakao.maps.Map(container, options);\r\n        placeRef.current = new kakao.maps.services.Places();\r\n        const map = mapRef.current;\r\n        const geocoder = new kakao.maps.services.Geocoder();\r\n        const ps = placeRef.current;\r\n\r\n        map.addOverlayMapTypeId(kakao.maps.MapTypeId.TRAFFIC); \r\n\r\n        function addEventHandle(target, type, callback) {\r\n            if (target.addEventListener) {\r\n                target.addEventListener(type, callback);\r\n            } else {\r\n                target.attachEvent('on' + type, callback);\r\n            }\r\n        }\r\n\r\n        function searchDetailAddrFromCoords(coords, callback) {\r\n            geocoder.coord2Address(coords.getLng(), coords.getLat(), callback);\r\n        }\r\n\r\n        function displayPlaces(place) {\r\n            const places = place[\"poi\"];\r\n            setSearchLeng(places.length)\r\n            var order = document.getElementById(currCategory).getAttribute('data-order');\r\n            for ( var i=0; i<places.length; i++) {\r\n                let lat = places[i][\"noorLat\"];\r\n                let lon = places[i][\"noorLon\"];\r\n                var marker = addMarker(new kakao.maps.LatLng(lat, lon), order);\r\n                (function(marker, places) {\r\n                    kakao.maps.event.addListener(marker, 'click', function() {\r\n                        displayPlaceInfo(places);\r\n                        setOpenPopUp(true);\r\n                    });\r\n                })(marker, places[i]);\r\n            }\r\n            map.panTo(new kakao.maps.LatLng(places[0][\"noorLat\"], places[0][\"noorLon\"]));\r\n        }\r\n\r\n        function removeMarker() {\r\n            for ( var i = 0; i < markers.length; i++ ) {\r\n                markers[i].setMap(null);\r\n            }\r\n            markers = [];\r\n        }\r\n\r\n        function displayMarker(place) {\r\n            const x = place[\"gpsX\"][\"_text\"];\r\n            const y = place[\"gpsY\"][\"_text\"];\r\n            const name = place[\"stNm\"][\"_text\"];\r\n            markerRef.current = new kakao.maps.Marker({\r\n                map: map,\r\n                clickable: true,\r\n                position: new kakao.maps.LatLng(y, x)\r\n            });\r\n            let marker = markerRef.current;\r\n            kakao.maps.event.addListener(marker, 'click', () => {\r\n                searchDetailAddrFromCoords(new kakao.maps.LatLng(y, x), (result, status) => {\r\n                    if (status === kakao.maps.services.Status.OK) {\r\n                        map.panTo(new kakao.maps.LatLng(y, x));\r\n                        setPlacePopUp({ ...placePopUp, addressName: result[0].address.address_name, placeName: name, x: x, y: y });\r\n                        setOpenPopUp(true);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        function placesSearchCB(places) {\r\n            if (!currCategory) return;\r\n            placeOverlay.setMap(null);\r\n            removeMarker();\r\n            if((places[\"poi\"]).length !== 0) displayPlaces(places);\r\n        }\r\n\r\n        function addMarker(position, order) {\r\n            var imageSrc = '/staticFolder/placeImages/location.png',\r\n                imageSize = new kakao.maps.Size(30, 30),\r\n                imgOptions =  {},\r\n                markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions),\r\n                marker = new kakao.maps.Marker({\r\n                    position: position, // 마커의 위치\r\n                    image: markerImage \r\n                });\r\n        \r\n            marker.setMap(map); // 지도 위에 마커를 표출합니다\r\n            markers.push(marker);  // 배열에 생성된 마커를 추가합니다\r\n        \r\n            return marker;\r\n        }\r\n\r\n        function addCategoryClickEvent() {\r\n            var category = document.getElementById('category'),\r\n                children = category.children;\r\n        \r\n            for (var i=0; i<children.length; i++) {\r\n                children[i].onclick = onClickCategory;\r\n            }\r\n        }\r\n        \r\n        function onClickCategory() {\r\n            const id = this.id, className = this.className;\r\n            const radiusId = document.getElementById('RadiusId');\r\n            const radiusValue = radiusId.options[radiusId.selectedIndex].value;\r\n            \r\n            placeOverlay.setMap(null);\r\n            setOpenPopUp(false);\r\n            setSearchLeng(0);\r\n        \r\n            if (className === 'on') {\r\n                currCategory = '';\r\n                changeCategoryClass();\r\n                removeMarker();\r\n            } if(id === '검색'){\r\n                removeMarker();\r\n                setOpenSearchPopUp(false);\r\n            } else {\r\n                removeMarker();\r\n                setOpenSearchPopUp(false);\r\n                currCategory = id;\r\n                changeCategoryClass(this);\r\n                axios.post(\"/api/TmapAPI\", {convine: id, lon: stationList[\"gpsX\"][\"_text\"], lat: stationList[\"gpsY\"][\"_text\"], radius: radiusValue})\r\n                .then((res) => {\r\n                    if(res.data.code === 200){\r\n                        placesSearchCB(res.data.CatePlace[\"searchPoiInfo\"][\"pois\"]);\r\n                    }else{\r\n                        placesSearchCB({\"poi\": []});\r\n                    }\r\n                }).catch((err) => {\r\n                    console.log(err);\r\n                })\r\n            }\r\n        }\r\n        \r\n        function changeCategoryClass(el) {\r\n            var category = document.getElementById('category'),\r\n                children = category.children, i;\r\n        \r\n            for ( i=0; i<children.length; i++ ) {\r\n                children[i].className = '';\r\n            }\r\n        \r\n            if (el) el.className = 'on';\r\n        } \r\n\r\n        function displayPlaceInfo (place) {\r\n            map.panTo(new kakao.maps.LatLng(place[\"noorLat\"], place[\"noorLon\"]))\r\n            let addressName = place.upperAddrName+\" \"+place.middleAddrName+\" \"+place.roadName+\" \"+place.buildingNo1;\r\n            setPlacePopUp({ ...placePopUp, addressName: addressName, placeName: place.name, x:place[\"noorLat\"], y:place[\"noorLon\"] });\r\n            console.log(place)\r\n        }\r\n\r\n        let bounds = new kakao.maps.LatLngBounds();\r\n        displayMarker(stationList);\r\n        bounds.extend(new kakao.maps.LatLng(stationList[\"gpsY\"][\"_text\"], stationList[\"gpsX\"][\"_text\"]));\r\n        map.setBounds(bounds);\r\n\r\n    }, [searchTitle]);\r\n\r\n    const map = mapRef.current;\r\n\r\n    function displayPlaceInfo (place) {\r\n        if(Object.keys(place).includes(\"noorLat\")) {\r\n            let addressName = place.upperAddrName+\" \"+place.middleAddrName+\" \"+place.roadName+\" \"+place.buildingNo1;\r\n            if(place.roadName === '') addressName = place.upperAddrName+\" \"+place.middleAddrName+\" \"+place.lowerAddrName;\r\n            map.panTo(new kakao.maps.LatLng(place[\"noorLat\"], place[\"noorLon\"]))\r\n            setPlacePopUp({ ...placePopUp, addressName: addressName, placeName: place.name, x: place[\"noorLat\"], y: place[\"noorLon\"] });\r\n        }else{\r\n            map.panTo(new kakao.maps.LatLng(place.y, place.x))\r\n            setPlacePopUp({ ...placePopUp, addressName: place.road_address_name, placeName: place.place_name, x: place.x, y: place.y });\r\n        }\r\n    }\r\n\r\n    function displayPlaces(place) {\r\n        const places = place;\r\n        setSearchLeng(place.length)\r\n        let marker;\r\n        for (var i = 0; i < places.length; i++) {\r\n            if(Object.keys(places[i]).includes(\"noorLat\")) \r\n                marker = addMarker(new kakao.maps.LatLng(places[i][\"noorLat\"], places[i][\"noorLon\"]), 1);\r\n            else marker = addMarker(new kakao.maps.LatLng(places[i].y, places[i].x), 1);\r\n            (function (marker, places) {\r\n                kakao.maps.event.addListener(marker, 'click', function () {\r\n                    displayPlaceInfo(places);\r\n                    setOpenPopUp(true)\r\n                });\r\n            })(marker, places[i]);\r\n        }\r\n        setMarkersA2(markers2);\r\n        if(places[0] !== undefined){\r\n            if(Object.keys(places[0]).includes(\"noorLat\")) \r\n                map.panTo(new kakao.maps.LatLng(places[0][\"noorLat\"], places[0][\"noorLon\"]));\r\n            else map.panTo(new kakao.maps.LatLng(places[0].y, places[0].x));\r\n        }\r\n        else {\r\n            map.panTo(new kakao.maps.LatLng(stationList[\"gpsY\"][\"_text\"], stationList[\"gpsX\"][\"_text\"]));\r\n            setPlacePopUp({ ...placePopUp, addressName: \"\", placeName: \"\", x:0, y:0 });\r\n        }\r\n    }\r\n\r\n    function addMarker(position, order) {\r\n        var imageSrc = '/staticFolder/placeImages/location.png',\r\n            imageSize = new kakao.maps.Size(30, 30),\r\n            imgOptions = {},\r\n            markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions),\r\n            marker = new kakao.maps.Marker({\r\n                position: position, // 마커의 위치\r\n                image: markerImage\r\n            });\r\n\r\n        marker.setMap(map); // 지도 위에 마커를 표출합니다\r\n        markers2.push(marker);  // 배열에 생성된 마커를 추가합니다\r\n        return marker;\r\n    }\r\n\r\n    function removeMarker() {\r\n        for (var i = 0; i < markersA2.length; i++) {\r\n            markersA2[i].setMap(null);\r\n        }\r\n        setMarkersA2([]);\r\n    }\r\n\r\n    const removeMarker2 = () => {\r\n        for (var i = 0; i < markersA2.length; i++) {\r\n            markersA2[i].setMap(null);\r\n        }\r\n        setMarkersA2([]);\r\n    }\r\n\r\n    const handleSearchTitle = (e) => {\r\n        setSearchTitles(e.target.value);\r\n    }\r\n\r\n    const SubmitSearch = (e) => {\r\n        currCategory = '';\r\n        const search = searchTitles;\r\n        removeMarker();\r\n        setOpenPopUp(false);\r\n        axios.post(\"/api/TmapAPI\", {convine: search, lon: stationList[\"gpsX\"][\"_text\"], lat: stationList[\"gpsY\"][\"_text\"], radius: radiusSelect})\r\n        .then((res) => {\r\n            if(res.data.code === 200){\r\n                displayPlaces(res.data.CatePlace[\"searchPoiInfo\"][\"pois\"][\"poi\"]);\r\n            }else{\r\n                displayPlaces({\"poi\": []});\r\n            }\r\n        }).catch((err) => {\r\n            console.log(err);\r\n        });\r\n        e.preventDefault();\r\n    }\r\n\r\n    const selectChange = (e) => {\r\n        setRadiusSelect(e.target.value);\r\n    }\r\n\r\n    const CilckSearch = () => {\r\n        setSearchTitles(\"\");\r\n        setSearchLeng(0)\r\n        setOpenPopUp(false)\r\n        setOpenSearchPopUp(true);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <MapDiv id=\"map\"></MapDiv>\r\n            <ul id=\"category\">\r\n                <li id={\"\"}></li>\r\n                {\r\n                    CatePlace.map((item, key) => (\r\n                        <li key={key} id={item.name} data-order={key} onClick={() => removeMarker2()}>\r\n                            {item.name}\r\n                        </li>\r\n                    ))\r\n                }\r\n                <li onClick={() => CilckSearch()}>카테고리</li>\r\n            </ul>\r\n            <RadiusDiv>\r\n                <select id=\"RadiusId\" onChange={selectChange} value={radiusSelect}>\r\n                    {\r\n                        Options.map((item, key) => (\r\n                            <option key={key} value={item.radius}>{item.radius}KM</option>\r\n                        ))\r\n                    }\r\n                </select>\r\n                <span>찾은 결과: {searchLeng}/200</span>\r\n            </RadiusDiv>\r\n            {\r\n                openSearchPopUp ? \r\n                <SearchPopup>\r\n                    <form onSubmit={SubmitSearch}>\r\n                        <input type=\"text\" value={searchTitles} onChange={handleSearchTitle} />\r\n                        <button type=\"submit\">검색</button>\r\n                    </form>\r\n                </SearchPopup> : \"\"\r\n            }\r\n            {\r\n                openPopUp ? \r\n                    <MapPopUpDiv>\r\n                        <MapPopUpHeaderDiv>\r\n                            정류장 정보\r\n                            <button \r\n                                style={{float: \"right\"}}\r\n                                onClick={() => setOpenPopUp(false)}\r\n                            >\r\n                                <i className='fa fa-close'/>\r\n                            </button>\r\n                        </MapPopUpHeaderDiv>\r\n                        {placePopUp.placeName !== searchTitle ? \r\n                        <p>\r\n                            <a href={\"https://map.kakao.com/?q=\" + placePopUp.addressName } target=\"_blank\">\r\n                                길찾기\r\n                            </a>/\r\n                            {placePopUp.placeName}\r\n                        </p> : \r\n                        <p>\r\n                                <a href={\"https://map.kakao.com/?q=\" + searchTitle } target=\"_blank\">\r\n                                    길찾기\r\n                                </a>/{searchTitle}/{arsID}\r\n                        </p>\r\n                        }\r\n                        <p>{placePopUp.addressName}</p>\r\n                    </MapPopUpDiv>\r\n                : \"\"\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MapDiv = styled.div`\r\n    width: 100%;\r\n    height: 600px;\r\n    position: absolute;\r\n    display: flex;\r\n    margin: auto;\r\n    left: 0;\r\n    right: 0;\r\n`;\r\n\r\nconst MapPopUpDiv = styled.div`\r\n    z-index: 99;\r\n    position: relative;\r\n    display: block;\r\n    width: 100%;\r\n    height: 200px;\r\n    top: 349px;\r\n    left: 0;\r\n    margin: auto;\r\n    background: rgba(255,255,255,0.85);\r\n`;\r\n\r\nconst MapPopUpHeaderDiv = styled.div`\r\n    padding: 10px;\r\n    background: rgba(0, 50, 150, 0.5);\r\n    border: 2px solid white;\r\n`;\r\n\r\nconst SearchPopup = styled.div`\r\n    position: absolute;\r\n    z-index: 99;\r\n    left: 0;\r\n    right: 0;\r\n    margin: auto;\r\n`;\r\n\r\nconst RadiusDiv = styled.div`\r\n    position: absolute;\r\n    z-index: 100;\r\n    right: 250px;\r\n    top: 115px;\r\n`;\r\n\r\nexport default KakaoMapScript",{"ruleId":"185","severity":1,"message":"186","line":2,"column":10,"nodeType":"187","messageId":"188","endLine":2,"endColumn":18},{"ruleId":"185","severity":1,"message":"189","line":3,"column":10,"nodeType":"187","messageId":"188","endLine":3,"endColumn":21},{"ruleId":"185","severity":1,"message":"190","line":3,"column":23,"nodeType":"187","messageId":"188","endLine":3,"endColumn":38},{"ruleId":"185","severity":1,"message":"191","line":9,"column":10,"nodeType":"187","messageId":"188","endLine":9,"endColumn":30},{"ruleId":"185","severity":1,"message":"192","line":12,"column":40,"nodeType":"187","messageId":"188","endLine":12,"endColumn":50},{"ruleId":"185","severity":1,"message":"193","line":14,"column":12,"nodeType":"187","messageId":"188","endLine":14,"endColumn":21},{"ruleId":"194","severity":1,"message":"195","line":28,"column":8,"nodeType":"196","endLine":28,"endColumn":10,"suggestions":"197"},{"ruleId":"194","severity":1,"message":"198","line":45,"column":8,"nodeType":"196","endLine":45,"endColumn":10,"suggestions":"199"},{"ruleId":"185","severity":1,"message":"200","line":1,"column":10,"nodeType":"201","messageId":"188","endLine":1,"endColumn":15},{"ruleId":"185","severity":1,"message":"202","line":2,"column":27,"nodeType":"187","messageId":"188","endLine":2,"endColumn":36},{"ruleId":"185","severity":1,"message":"203","line":2,"column":38,"nodeType":"187","messageId":"188","endLine":2,"endColumn":44},{"ruleId":"185","severity":1,"message":"202","line":1,"column":27,"nodeType":"187","messageId":"188","endLine":1,"endColumn":36},{"ruleId":"185","severity":1,"message":"203","line":1,"column":38,"nodeType":"187","messageId":"188","endLine":1,"endColumn":44},{"ruleId":"185","severity":1,"message":"204","line":2,"column":8,"nodeType":"187","messageId":"188","endLine":2,"endColumn":13},{"ruleId":"185","severity":1,"message":"203","line":1,"column":38,"nodeType":"187","messageId":"188","endLine":1,"endColumn":44},{"ruleId":"185","severity":1,"message":"205","line":2,"column":10,"nodeType":"187","messageId":"188","endLine":2,"endColumn":14},{"ruleId":"185","severity":1,"message":"206","line":4,"column":10,"nodeType":"187","messageId":"188","endLine":4,"endColumn":18},{"ruleId":"194","severity":1,"message":"207","line":20,"column":8,"nodeType":"196","endLine":20,"endColumn":10,"suggestions":"208"},{"ruleId":"185","severity":1,"message":"200","line":1,"column":10,"nodeType":"201","messageId":"188","endLine":1,"endColumn":15},{"ruleId":"185","severity":1,"message":"202","line":2,"column":27,"nodeType":"187","messageId":"188","endLine":2,"endColumn":36},{"ruleId":"185","severity":1,"message":"203","line":2,"column":38,"nodeType":"187","messageId":"188","endLine":2,"endColumn":44},{"ruleId":"185","severity":1,"message":"209","line":3,"column":8,"nodeType":"187","messageId":"188","endLine":3,"endColumn":20},{"ruleId":"185","severity":1,"message":"210","line":4,"column":8,"nodeType":"187","messageId":"188","endLine":4,"endColumn":19},{"ruleId":"185","severity":1,"message":"211","line":9,"column":26,"nodeType":"187","messageId":"188","endLine":9,"endColumn":38},{"ruleId":"185","severity":1,"message":"212","line":10,"column":12,"nodeType":"187","messageId":"188","endLine":10,"endColumn":22},{"ruleId":"185","severity":1,"message":"213","line":10,"column":24,"nodeType":"187","messageId":"188","endLine":10,"endColumn":37},{"ruleId":"185","severity":1,"message":"214","line":11,"column":12,"nodeType":"187","messageId":"188","endLine":11,"endColumn":20},{"ruleId":"185","severity":1,"message":"215","line":12,"column":12,"nodeType":"187","messageId":"188","endLine":12,"endColumn":22},{"ruleId":"185","severity":1,"message":"216","line":12,"column":24,"nodeType":"187","messageId":"188","endLine":12,"endColumn":37},{"ruleId":"185","severity":1,"message":"217","line":13,"column":12,"nodeType":"187","messageId":"188","endLine":13,"endColumn":21},{"ruleId":"185","severity":1,"message":"218","line":16,"column":11,"nodeType":"187","messageId":"188","endLine":16,"endColumn":20},{"ruleId":"185","severity":1,"message":"219","line":32,"column":11,"nodeType":"187","messageId":"188","endLine":32,"endColumn":21},{"ruleId":"185","severity":1,"message":"220","line":36,"column":11,"nodeType":"187","messageId":"188","endLine":36,"endColumn":22},{"ruleId":"185","severity":1,"message":"200","line":1,"column":10,"nodeType":"201","messageId":"188","endLine":1,"endColumn":15},{"ruleId":"185","severity":1,"message":"215","line":10,"column":12,"nodeType":"187","messageId":"188","endLine":10,"endColumn":22},{"ruleId":"185","severity":1,"message":"221","line":12,"column":12,"nodeType":"187","messageId":"188","endLine":12,"endColumn":21},{"ruleId":"185","severity":1,"message":"222","line":12,"column":23,"nodeType":"187","messageId":"188","endLine":12,"endColumn":35},{"ruleId":"185","severity":1,"message":"223","line":21,"column":11,"nodeType":"187","messageId":"188","endLine":21,"endColumn":19},{"ruleId":"194","severity":1,"message":"224","line":115,"column":14,"nodeType":"196","endLine":115,"endColumn":23,"suggestions":"225"},{"ruleId":"226","severity":1,"message":"227","line":233,"column":49,"nodeType":"228","endLine":233,"endColumn":143},{"ruleId":"226","severity":1,"message":"227","line":240,"column":37,"nodeType":"228","endLine":240,"endColumn":112},{"ruleId":"185","severity":1,"message":"203","line":1,"column":38,"nodeType":"187","messageId":"188","endLine":1,"endColumn":44},{"ruleId":"194","severity":1,"message":"229","line":12,"column":8,"nodeType":"196","endLine":12,"endColumn":10,"suggestions":"230"},{"ruleId":"194","severity":1,"message":"231","line":33,"column":8,"nodeType":"196","endLine":33,"endColumn":18,"suggestions":"232"},{"ruleId":"233","severity":1,"message":"234","line":77,"column":27,"nodeType":"235","messageId":"236","endLine":77,"endColumn":39},{"ruleId":"237","severity":1,"message":"238","line":84,"column":51,"nodeType":"239","messageId":"240","endLine":84,"endColumn":53},{"ruleId":"241","severity":1,"message":"242","line":127,"column":91,"nodeType":"243","messageId":"244","endLine":127,"endColumn":92},{"ruleId":"241","severity":1,"message":"242","line":130,"column":91,"nodeType":"243","messageId":"244","endLine":130,"endColumn":92},{"ruleId":"241","severity":1,"message":"242","line":148,"column":96,"nodeType":"243","messageId":"244","endLine":148,"endColumn":97},{"ruleId":"185","severity":1,"message":"245","line":1,"column":8,"nodeType":"187","messageId":"188","endLine":1,"endColumn":13},{"ruleId":"185","severity":1,"message":"246","line":1,"column":17,"nodeType":"187","messageId":"188","endLine":1,"endColumn":25},{"ruleId":"185","severity":1,"message":"202","line":1,"column":27,"nodeType":"187","messageId":"188","endLine":1,"endColumn":36},{"ruleId":"185","severity":1,"message":"203","line":1,"column":38,"nodeType":"187","messageId":"188","endLine":1,"endColumn":44},{"ruleId":"185","severity":1,"message":"210","line":3,"column":8,"nodeType":"187","messageId":"188","endLine":3,"endColumn":19},{"ruleId":"185","severity":1,"message":"204","line":4,"column":8,"nodeType":"187","messageId":"188","endLine":4,"endColumn":13},{"ruleId":"185","severity":1,"message":"247","line":7,"column":50,"nodeType":"187","messageId":"188","endLine":7,"endColumn":57},{"ruleId":"185","severity":1,"message":"248","line":8,"column":10,"nodeType":"187","messageId":"188","endLine":8,"endColumn":22},{"ruleId":"185","severity":1,"message":"249","line":8,"column":24,"nodeType":"187","messageId":"188","endLine":8,"endColumn":39},{"ruleId":"226","severity":1,"message":"227","line":18,"column":15,"nodeType":"228","endLine":18,"endColumn":65},{"ruleId":"185","severity":1,"message":"192","line":7,"column":40,"nodeType":"187","messageId":"188","endLine":7,"endColumn":50},{"ruleId":"194","severity":1,"message":"198","line":25,"column":8,"nodeType":"196","endLine":25,"endColumn":10,"suggestions":"250"},{"ruleId":"185","severity":1,"message":"246","line":1,"column":17,"nodeType":"187","messageId":"188","endLine":1,"endColumn":25},{"ruleId":"185","severity":1,"message":"202","line":1,"column":27,"nodeType":"187","messageId":"188","endLine":1,"endColumn":36},{"ruleId":"185","severity":1,"message":"203","line":1,"column":38,"nodeType":"187","messageId":"188","endLine":1,"endColumn":44},{"ruleId":"237","severity":1,"message":"238","line":42,"column":42,"nodeType":"239","messageId":"240","endLine":42,"endColumn":44},{"ruleId":"185","severity":1,"message":"251","line":100,"column":21,"nodeType":"187","messageId":"188","endLine":100,"endColumn":28},{"ruleId":"237","severity":1,"message":"238","line":121,"column":37,"nodeType":"239","messageId":"240","endLine":121,"endColumn":39},{"ruleId":"252","severity":1,"message":"253","line":162,"column":29,"nodeType":"187","messageId":"254","endLine":162,"endColumn":31},{"ruleId":"185","severity":1,"message":"255","line":195,"column":25,"nodeType":"187","messageId":"188","endLine":195,"endColumn":30},{"ruleId":"194","severity":1,"message":"256","line":275,"column":8,"nodeType":"196","endLine":275,"endColumn":19,"suggestions":"257"},{"ruleId":"185","severity":1,"message":"258","line":38,"column":11,"nodeType":"187","messageId":"188","endLine":38,"endColumn":18},{"ruleId":"185","severity":1,"message":"259","line":70,"column":15,"nodeType":"187","messageId":"188","endLine":70,"endColumn":17},{"ruleId":"194","severity":1,"message":"260","line":174,"column":32,"nodeType":"261","endLine":174,"endColumn":34},{"ruleId":"262","severity":1,"message":"263","line":373,"column":29,"nodeType":"228","messageId":"264","endLine":373,"endColumn":109,"fix":"265"},{"ruleId":"262","severity":1,"message":"263","line":379,"column":33,"nodeType":"228","messageId":"264","endLine":379,"endColumn":102,"fix":"266"},"no-unused-vars","'Provider' is defined but never used.","Identifier","unusedVar","'createStore' is defined but never used.","'applyMiddleware' is defined but never used.","'createBrowserHistory' is defined but never used.","'searchType' is assigned a value but never used.","'infoTyped' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'arsId'. Either include it or remove the dependency array.","ArrayExpression",["267"],"React Hook useEffect has missing dependencies: 'arsId' and 'stNm'. Either include them or remove the dependency array.",["268"],"'kakao' is defined but never used.","Program","'useEffect' is defined but never used.","'useRef' is defined but never used.","'axios' is defined but never used.","'Link' is defined but never used.","'debounce' is defined but never used.","React Hook useEffect has a missing dependency: 'clickBusStation'. Either include it or remove the dependency array.",["269"],"'BusRoutModal' is defined but never used.","'useInterval' is defined but never used.","'busRouteType' is assigned a value but never used.","'BusStation' is assigned a value but never used.","'setBusStation' is assigned a value but never used.","'BusRoute' is assigned a value but never used.","'stateTitle' is assigned a value but never used.","'setStateTitle' is assigned a value but never used.","'modalOpen' is assigned a value but never used.","'openModal' is assigned a value but never used.","'closeModal' is assigned a value but never used.","'reloadModal' is assigned a value but never used.","'busRouted' is assigned a value but never used.","'setBusRouted' is assigned a value but never used.","'inputRef' is assigned a value but never used.","React Hook useMemo has an unnecessary dependency: 'busName'. Either exclude it or remove the dependency array.",["270"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'ArriveBusListInfo'. Either include it or remove the dependency array.",["271"],"React Hook useEffect has a missing dependency: 'autoCompleteList'. Either include it or remove the dependency array.",["272"],"no-new-object","The object literal notation {} is preferrable.","NewExpression","preferLiteral","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'React' is defined but never used.","'useState' is defined but never used.","'routeId' is assigned a value but never used.","'BusRouteList' is assigned a value but never used.","'setBusRouteList' is assigned a value but never used.",["273"],"'dragged' is assigned a value but never used.","no-redeclare","'pt' is already defined.","redeclared","'delta' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'gkhead'. Either include it or remove the dependency array.",["274"],"'TmapRef' is assigned a value but never used.","'ps' is assigned a value but never used.","Assignments to the 'currCategory' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"275","text":"276"},{"range":"277","text":"276"},{"desc":"278","fix":"279"},{"desc":"280","fix":"281"},{"desc":"282","fix":"283"},{"desc":"284","fix":"285"},{"desc":"286","fix":"287"},{"desc":"288","fix":"289"},{"desc":"280","fix":"290"},{"desc":"291","fix":"292"},[14414,14414]," rel=\"noreferrer\"",[14703,14703],"Update the dependencies array to be: [arsId]",{"range":"293","text":"294"},"Update the dependencies array to be: [arsId, stNm]",{"range":"295","text":"296"},"Update the dependencies array to be: [clickBusStation]",{"range":"297","text":"298"},"Update the dependencies array to be: []",{"range":"299","text":"300"},"Update the dependencies array to be: [ArriveBusListInfo]",{"range":"301","text":"302"},"Update the dependencies array to be: [autoCompleteList, autoList]",{"range":"303","text":"304"},{"range":"305","text":"296"},"Update the dependencies array to be: [canvasRef, gkhead]",{"range":"306","text":"307"},[1170,1172],"[arsId]",[1755,1757],"[arsId, stNm]",[855,857],"[clickBusStation]",[4609,4618],"[]",[396,398],"[ArriveBusListInfo]",[1492,1502],"[autoCompleteList, autoList]",[1027,1029],[11624,11635],"[canvasRef, gkhead]"]