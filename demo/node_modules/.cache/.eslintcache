[{"D:\\01. a\\react_nodeExpress\\demo\\src\\index.js":"1","D:\\01. a\\react_nodeExpress\\demo\\src\\App.js":"2","D:\\01. a\\react_nodeExpress\\demo\\src\\reportWebVitals.js":"3","D:\\react_nodeExpress\\demo\\src\\index.js":"4","D:\\react_nodeExpress\\demo\\src\\reportWebVitals.js":"5","D:\\react_nodeExpress\\demo\\src\\App.js":"6","D:\\react_nodeExpress\\demo\\src\\list\\StationList.jsx":"7","D:\\react_nodeExpress\\demo\\src\\list\\StationListF.jsx":"8","D:\\react_nodeExpress\\demo\\src\\script\\KakaoMapScript.js":"9","D:\\react_nodeExpress\\demo\\src\\list\\StationArriveBusInfo.jsx":"10","D:\\react_nodeExpress\\demo\\src\\busInfo\\BusStationList.jsx":"11","D:\\react_nodeExpress\\demo\\src\\busInfo\\BusArriveList.jsx":"12","D:\\react_nodeExpress\\demo\\src\\script\\useInterval.js":"13","D:\\react_nodeExpress\\demo\\src\\script\\BusRouteModal.js":"14","D:\\react_nodeExpress\\demo\\src\\search\\BusRouteSearch.js":"15","D:\\react_nodeExpress\\demo\\src\\search\\BusStationSearch.js":"16"},{"size":535,"mtime":1652838784552,"results":"17","hashOfConfig":"18"},{"size":1582,"mtime":1652933431733,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1652838784675,"results":"20","hashOfConfig":"18"},{"size":436,"mtime":1654565332612,"results":"21","hashOfConfig":"22"},{"size":375,"mtime":1653014409772,"results":"23","hashOfConfig":"22"},{"size":665,"mtime":1654563505040,"results":"24","hashOfConfig":"22"},{"size":519,"mtime":1653528798670,"results":"25","hashOfConfig":"22"},{"size":1108,"mtime":1654567548315,"results":"26","hashOfConfig":"22"},{"size":5972,"mtime":1654674194904,"results":"27","hashOfConfig":"22"},{"size":1603,"mtime":1653958004268,"results":"28","hashOfConfig":"22"},{"size":4958,"mtime":1653974052938,"results":"29","hashOfConfig":"22"},{"size":3474,"mtime":1653971866099,"results":"30","hashOfConfig":"22"},{"size":534,"mtime":1653960037187,"results":"31","hashOfConfig":"22"},{"size":1611,"mtime":1653973229663,"results":"32","hashOfConfig":"22"},{"size":6460,"mtime":1654736509691,"results":"33","hashOfConfig":"22"},{"size":3633,"mtime":1654566501924,"results":"34","hashOfConfig":"22"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13y43vh",{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1nrqkqm",{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},"D:\\01. a\\react_nodeExpress\\demo\\src\\index.js",[],[],"D:\\01. a\\react_nodeExpress\\demo\\src\\App.js",["95","96"],[],"import logo from './logo.svg';\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nconst App = () => {\n  const [getUser, setUser] = useState([]);\n\n  const clickButton = () => {\n    axios.post(\"/api/test1\", { user: \"ddd\" })\n      .then((res) => {\n        setUser(res.data)\n        console.log(getUser)\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n  }\n\n  const clickButton2 = () => {\n    axios.post(\"/api/test2\", { user: \"ddd\" })\n      .then((res) => {\n        setUser(res.data)\n        console.log(getUser)\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n  }\n\n  const clickButton3 = () => {\n    axios.post(\"/api/test3\")\n      .then((res) => {\n        setUser(res.data)\n        console.log(getUser)\n      })\n      .catch((err) => {\n        console.log(err)\n      })\n  }\n\n  return (\n    <>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n          <button type=\"button\" onClick={clickButton}>Read</button>\n          <button type=\"button\" onClick={clickButton2}>Create</button>\n          <button type=\"button\" onClick={clickButton3}>Update</button>\n        </header>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","D:\\01. a\\react_nodeExpress\\demo\\src\\reportWebVitals.js",[],[],"D:\\react_nodeExpress\\demo\\src\\index.js",[],[],"D:\\react_nodeExpress\\demo\\src\\reportWebVitals.js",[],[],[],"D:\\react_nodeExpress\\demo\\src\\App.js",[],[],"D:\\react_nodeExpress\\demo\\src\\list\\StationList.jsx",["97","98","99"],[],"import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst StationList = () => {\r\n  const [station, setStation] = useState('');\r\n\r\n  const handleStation = (e) => {\r\n    setStation(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <input type=\"text\" name='stationName' onChange={handleStation}></input>\r\n          { station }\r\n        </header>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default StationList;","D:\\react_nodeExpress\\demo\\src\\list\\StationListF.jsx",["100","101","102","103"],[],"/*global kakao*/\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport BusRouteSearch from '../search/BusRouteSearch';\r\nimport BusStationSearch from '../search/BusStationSearch';\r\nimport axios from 'axios';\r\n\r\nconst StationListF = () => {\r\n  const [infoType, setInfoType] = useState('Bus');\r\n\r\n  const ChangeSearchInfo = (info) => {\r\n    switch (info) {\r\n      case \"Bus\": {\r\n        setInfoType(info);\r\n        break;\r\n      }\r\n      case \"Station\": {\r\n        setInfoType(info);\r\n        break;\r\n      }\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <header className='main-header'>\r\n        <div>\r\n          <button onClick={() => ChangeSearchInfo(\"Bus\")}>버스</button>\r\n          <button onClick={() => ChangeSearchInfo(\"Station\")}>정류소</button>\r\n        </div>\r\n      </header>\r\n      <div className='main-fullScreen'>\r\n        <section className='main-content'>\r\n            {\r\n              infoType === \"Bus\" ? <BusRouteSearch /> : <BusStationSearch />\r\n            }\r\n        </section>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default StationListF;","D:\\react_nodeExpress\\demo\\src\\script\\KakaoMapScript.js",["104","105"],[],"/*global kakao*/\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst KakaoMapScript = ({ searchPlace }) => {\r\n    const [lastClickStation, setLastClickStation] = useState('');\r\n    const busRouteType = {\r\n        \"1\": \"공항\", \"2\": \"마을\", \"3\": \"간선\", \"4\": \"지선\", \"5\": \"순환\", \"6\": \"광역\", \"7\": \"인천\", \"8\": \"경기\", \"9\": \"폐지\", \"0\": \"공용\"\r\n    }\r\n    const mapRef = useRef();\r\n    const markerRef = useRef();\r\n    const infowindowRef = useRef();\r\n\r\n    useEffect(() => {\r\n        const container = document.getElementById('map');\r\n        const options = {\r\n            center: new kakao.maps.LatLng(37.555167, 126.970833),\r\n            level: 3,\r\n        };\r\n\r\n        mapRef.current = new kakao.maps.Map(container, options);\r\n        const map = mapRef.current;\r\n        const geocoder = new kakao.maps.services.Geocoder();\r\n        // 장소 검색 객체를 생성\r\n        const ps = new kakao.maps.services.Places();\r\n\r\n        // 키워드로 장소를 검색\r\n        ps.keywordSearch(\"서울역\", placesSearchCB);\r\n\r\n        function searchDetailAddrFromCoords(coords, callback) {\r\n            // 좌표로 법정동 상세 주소 정보를 요청합니다\r\n            geocoder.coord2Address(coords.getLng(), coords.getLat(), callback);\r\n        }\r\n\r\n        function displayMarker(place) {\r\n            // 마커를 생성하고 지도에 표시\r\n            markerRef.current = new kakao.maps.Marker({\r\n                map: map,\r\n                clickable: true,\r\n                position: new kakao.maps.LatLng(place.y, place.x)\r\n            });\r\n            let marker = markerRef.current;\r\n            kakao.maps.event.addListener(marker, 'click', () => {\r\n                searchDetailAddrFromCoords(new kakao.maps.LatLng(place.y, place.x), (result, status) => {\r\n                    if (status === kakao.maps.services.Status.OK) {\r\n                        let iwContent = '<div style=\"padding:5px; color:black;\"><span style=\"font-size:15px; font-weight:bold;\">버스 정류장 ' + String(place.arsId) + '</span><p style=\"font-size:15px;\">' +\r\n                            String(place.stationName) +\r\n                            '</p><p style=\"font-size:15px;\"><a href=\"https://map.kakao.com/link/to/' +\r\n                            String(place.stationName) + ', ' + String(place.y) + ', ' + String(place.x) +\r\n                            '\" style=\"color:blue\" target=\"_blank\">길찾기</a></p><p style=\"font-size:12px; padding:5px;\">지번번호: '\r\n                            + String(result[0].address.address_name)\r\n                            + '</p></div>';\r\n                        infowindowRef.current = new kakao.maps.InfoWindow({\r\n                            position: new kakao.maps.LatLng(place.y, place.x),\r\n                            content: iwContent,\r\n                            removable: true,\r\n                        })\r\n                        let infowindow = infowindowRef.current;\r\n\r\n                        infowindow.open(map, marker);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        // 키워드 검색 완료 시 호출되는 콜백함수\r\n        function placesSearchCB(data, status, pagination) {\r\n            if (status === kakao.maps.services.Status.OK) {\r\n\r\n                // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\r\n                // LatLngBounds 객체에 좌표를 추가\r\n                let bounds = new kakao.maps.LatLngBounds();\r\n                if(searchPlace.length !== 0){\r\n                    for (let i = 0; i < searchPlace.length; i++) {\r\n                        displayMarker(searchPlace[i]);\r\n                        bounds.extend(new kakao.maps.LatLng(searchPlace[i].y, searchPlace[i].x));\r\n                    }\r\n                    // 검색된 장소 위치를 기준으로 지도 범위를 재설정\r\n                    map.setBounds(bounds);\r\n                }else{\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }, [searchPlace]);\r\n\r\n    const mapCurrent = (place, searchPlace, e) => {\r\n        console.log(e);\r\n        searchPlace.map((item, key) => {\r\n            document.getElementsByClassName(String(item.stationName+\"_\"+String(key)))[0].style.color=\"white\"\r\n        })\r\n        const map = mapRef.current;\r\n        let infowindow = infowindowRef.current;\r\n        if (infowindow !== undefined) {\r\n            infowindow.close();\r\n            infowindowRef.current = undefined;\r\n        }\r\n        map.setCenter(new kakao.maps.LatLng(place.y, place.x));\r\n        e.currentTarget.style.color = \"green\";\r\n        setLastClickStation(e.target.className);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"map\" style={{ width: '100%', height: \"450px\" }}></div>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>정류소 명</th>\r\n                        <th>정류소 고유번호</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        searchPlace.map((item, key) => (\r\n                            <tr key={key}>\r\n                                <td className={String(item.stationName)+\"_\"+String(key)} onClick={(e) => mapCurrent(item, searchPlace, e)}>{item.stationName}</td>\r\n                                <td><Link to=\"/BusInfo\"\r\n                                    state={{\r\n                                        stNm: item.stationName,\r\n                                        arsId: item.arsId,\r\n                                        busRouteType: busRouteType\r\n                                    }}\r\n                                >{item.arsId}</Link></td>\r\n                            </tr>\r\n                        ))\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default KakaoMapScript","D:\\react_nodeExpress\\demo\\src\\list\\StationArriveBusInfo.jsx",["106"],[],"import React, { useState } from 'react';\r\nimport BusStationList from '../busInfo/BusStationList';\r\nimport BusArriveList from '../busInfo/BusArriveList';\r\nimport { useLocation } from 'react-router';\r\n\r\nconst StationArriveBusInfo = () => {\r\n    const { stNm, arsId, busRouteType } = useLocation().state;\r\n    const [BusStation, setBusStation] = useState(<BusStationList arsId={arsId} busRouteType={busRouteType}></BusStationList>);\r\n\r\n    const BusInfoFunc = (infoType) => {\r\n        const infoTypes = infoType;\r\n        switch (infoTypes) {\r\n            case \"busInfo\": {\r\n                setBusStation(<BusStationList arsId={arsId} busRouteType={busRouteType}></BusStationList>);\r\n                break;\r\n            }\r\n            case \"arriveInfo\": {\r\n                setBusStation(<BusArriveList arsId={arsId} busRouteType={busRouteType}></BusArriveList>);\r\n                break;\r\n            }\r\n            default: {\r\n                alert(\"프론트앤드 에러다 미안하다\");\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <div>\r\n                        <button type=\"button\" onClick={() => BusInfoFunc(\"busInfo\")}>버스 정보 목록</button>\r\n                        <button type=\"button\" onClick={() => BusInfoFunc(\"arriveInfo\")}>도착 버스 정보 목록</button>\r\n                        {BusStation}\r\n                    </div>\r\n                </header>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default StationArriveBusInfo;","D:\\react_nodeExpress\\demo\\src\\busInfo\\BusStationList.jsx",["107","108","109"],[],"import React, { useState, useEffect, useRef } from 'react';\r\nimport BusRoutModal from '../script/BusRouteModal';\r\nimport useInterval from '../script/useInterval';\r\nimport axios from 'axios';\r\n\r\nconst BusStationList = (props) => {\r\n    const { arsId, busRouteType } = props;\r\n    const [BusStation, setBusStation] = useState([]);\r\n    const [BusRoute, setBusRoute] = useState([]);\r\n    const [stateTitle, setStateTitle] = useState('결과 없음');\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n    const [routeId, setRouteId] = useState(0);\r\n\r\n    useEffect(() => {\r\n        clickStationInfo();\r\n    }, []);\r\n\r\n    const clickStationInfo = async (e) => {\r\n        let BusList = [];\r\n        setStateTitle('로딩 중...');\r\n        await axios.post(\"/api/BusStationList\", { arsID: arsId })\r\n            .then((res) => {\r\n                if (res.data.code === 200) {\r\n                    BusList.push(res.data.stationList[\"ServiceResult\"][\"msgBody\"][\"itemList\"]);\r\n                    if (Array.isArray(BusList[0])) setBusStation(BusList[0])\r\n                    else setBusStation(BusList)\r\n                    setStateTitle('검색완료');\r\n                } else {\r\n                    setStateTitle('결과 없음');\r\n                }\r\n            }).catch((err) => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const openModal = async (routeId) => {\r\n        let BusList = [];\r\n        await axios.post(\"/api/ArrInfoByRouteList\", { busRouteId: routeId })\r\n            .then((res) => {\r\n                if (res.data.code === 200) {\r\n                    setRouteId(routeId)\r\n                    BusList.push(res.data.allRoute[\"ServiceResult\"][\"msgBody\"][\"itemList\"]);\r\n                    if (Array.isArray(BusList[0])) setBusRoute(BusList[0]);\r\n                    else setBusRoute(BusList);\r\n                    setModalOpen(true);\r\n                }\r\n            }).catch((err) => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const closeModal = () => {\r\n        setModalOpen(false);\r\n    }\r\n\r\n    const reloadModal = async () => {\r\n        let BusList = [];\r\n        await axios.post(\"/api/ArrInfoByRouteList\", { busRouteId: routeId })\r\n            .then((res) => {\r\n                if (res.data.code === 200) {\r\n                    BusList.push(res.data.allRoute[\"ServiceResult\"][\"msgBody\"][\"itemList\"]);\r\n                    if (Array.isArray(BusList[0])) setBusRoute(BusList[0]);\r\n                    else setBusRoute(BusList);\r\n                }\r\n            }).catch((err) => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <h2>해당 정류소에 경유하는 버스 목록/경유 버스 개수: {BusStation.length}</h2>\r\n                    {\r\n                        BusStation.length !== 0 ?\r\n                            <table>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>노선 ID</th>\r\n                                        <th>버스명</th>\r\n                                        <th>노선길이</th>\r\n                                        <th>노선유형</th>\r\n                                        <th>기점</th>\r\n                                        <th>종점</th>\r\n                                        <th>배차간격</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {\r\n                                        BusStation.map((item, key) => (\r\n                                            <tr key={key}>\r\n                                                <td><button onClick={() => openModal(item.busRouteId[\"_text\"])}>{item.busRouteId[\"_text\"]}</button></td>\r\n                                                <td>{item.busRouteNm[\"_text\"]}</td>\r\n                                                <td>{item.length[\"_text\"]}</td>\r\n                                                <td>{busRouteType[item.busRouteType[\"_text\"]]}</td>\r\n                                                <td>{item.stBegin[\"_text\"]}</td>\r\n                                                <td>{item.stEnd[\"_text\"]}</td>\r\n                                                <td>{item.term[\"_text\"]}</td>\r\n                                            </tr>\r\n                                        ))\r\n                                    }\r\n                                </tbody>\r\n                            </table>\r\n                            : <h5>{stateTitle}</h5>\r\n                    }\r\n                    <BusRoutModal open={modalOpen} close={closeModal} reload={reloadModal} header=\"Bus Route List\" BusRoute={BusRoute} routeId={routeId} />\r\n                </header>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default BusStationList;","D:\\react_nodeExpress\\demo\\src\\busInfo\\BusArriveList.jsx",["110","111"],[],"import React, { useState, useEffect, useRef } from 'react';\r\nimport useInterval from '../script/useInterval';\r\nimport axios from 'axios';\r\n\r\nconst BusArriveList = (props) => {\r\n    const { arsId, busRouteType } = props;\r\n    const [arrive, setArrive] = useState([]);\r\n    const [stateTitle, setStateTitle] = useState('결과 없음');\r\n\r\n    useEffect(() => {\r\n        ArriveBusListInfo();\r\n    }, []);\r\n\r\n    useInterval(() => {\r\n        ArriveBusListInfo();\r\n    }, 3000);\r\n\r\n    const ArriveBusListInfo = async (e) => {\r\n        let BusList = [];\r\n        setStateTitle('로딩 중...');\r\n        await axios.post(\"/api/ArriveBusList\", { arsID: arsId })\r\n            .then((res) => {\r\n                if (res.data.code === 200) {\r\n\r\n                    BusList.push(res.data.arrive[\"ServiceResult\"][\"msgBody\"][\"itemList\"]);\r\n                    if (Array.isArray(BusList[0])) {\r\n                        setArrive(BusList[0])\r\n                    } else {\r\n                        setArrive(BusList)\r\n                    }\r\n                    setStateTitle('검색완료');\r\n                } else {\r\n                    setStateTitle('결과 없음');\r\n                }\r\n            }).catch((err) => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <h2>정류소 고유번호에 해당하는 정류소의 도착버스 정보 조회/도착 버스 개수: {arrive.length}</h2>\r\n                    {\r\n                        arrive.length !== 0 ?\r\n                            <table>\r\n                                <thead>\r\n                                    <tr>\r\n                                        {/* <th>노선 ID</th> */}\r\n                                        <th>버스명</th>\r\n                                        <th>정류소 명</th>\r\n                                        <td>노선 유형</td>\r\n                                        <td>방향</td>\r\n                                        <td>첫번째 도착 예정 버스</td>\r\n                                        <td>두번째 도착 예정 버스</td>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {\r\n                                        arrive.map((item, key) => (\r\n                                            <tr key={key}>\r\n                                                {/* <td>{item.busRouteId[\"_text\"]}</td> */}\r\n                                                <td>{item.rtNm[\"_text\"]}</td>\r\n                                                <td>{item.stNm[\"_text\"]}</td>\r\n                                                <td>{busRouteType[item.routeType[\"_text\"]]}</td>\r\n                                                <td>{item.adirection[\"_text\"]}</td>\r\n                                                <td>{item.arrmsg1[\"_text\"]}</td>\r\n                                                <td>{item.arrmsg2[\"_text\"]}</td>\r\n                                            </tr>\r\n                                        ))\r\n                                    }\r\n                                </tbody>\r\n                            </table>\r\n                            : <h5>{stateTitle}</h5>\r\n                    }\r\n                </header>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default BusArriveList;","D:\\react_nodeExpress\\demo\\src\\script\\useInterval.js",["112","113"],[],"import React, { useState, useEffect, useRef } from 'react';\r\n\r\nconst useInterval = (callback, delay) => {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n\r\nexport default useInterval;","D:\\react_nodeExpress\\demo\\src\\script\\BusRouteModal.js",["114","115","116","117","118","119","120","121"],[],"import React, { useState, useEffect, useRef } from 'react';\r\nimport useInterval from './useInterval';\r\nimport axios from 'axios';\r\n\r\nconst BusRouteModal = (props) => {\r\n  const { open, close, reload, header, BusRoute, routeId } = props;\r\n  const [BusRouteList, setBusRouteList] = useState([]);\r\n  const reloadImg = require('../images/reload.png')\r\n\r\n  return (\r\n    // 모달이 열릴때 openModal 클래스가 생성된다.\r\n    <div className={open ? 'openModal modal' : 'modal'}>\r\n      {open ? (\r\n        <section>\r\n          <header>\r\n            <button className=\"Reload\" onClick={reload}>\r\n              <img src={reloadImg} width=\"15px\" height={\"15px\"}></img>\r\n            </button>\r\n            {header}\r\n            <button className=\"close\" onClick={close}>\r\n              &times;\r\n            </button>\r\n          </header>\r\n          <main>\r\n            {\r\n              BusRoute.length !== 0 ?\r\n                <div className='BusRouteMain'>\r\n                  {BusRoute.map((item, key) => (\r\n                    <ul className='BusRouteName' key={key}>\r\n                      <li>\r\n                        {item.stNm[\"_text\"]}\r\n                        <ul className='BusRouteMsg'>\r\n                          <li>{item.arrmsg1[\"_text\"]}</li>\r\n                          <li>{item.arrmsg2[\"_text\"]}</li>\r\n                        </ul>\r\n                      </li>\r\n                    </ul>\r\n                  ))}\r\n                </div> : <h4>아무것도 모다죠?</h4>\r\n            }\r\n          </main>\r\n        </section>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BusRouteModal;","D:\\react_nodeExpress\\demo\\src\\search\\BusRouteSearch.js",["122","123","124"],[],"/*global kakao*/\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst BusRouteSearch = () => {\r\n    const [busName, setBusName] = useState('');\r\n    const [stateTitle, setStateTitle] = useState('Click Bus');\r\n    const [busRouteId, setBusRouteId] = useState([]);\r\n    const [busLocate, setBusLocate] = useState([]);\r\n    const [busRoute, setBusRoute] = useState([]);\r\n    const [arrive, setArrive] = useState([]);\r\n\r\n    const IntervalRef = useRef();\r\n\r\n    useEffect(() => {\r\n        return () => clearInterval(IntervalRef.current)\r\n    }, [])\r\n\r\n    const clickBus = async (e) => {\r\n        e.preventDefault();\r\n        await axios.post(\"/api/BusListSearch\", { BusName: busName })\r\n            .then((res) => {\r\n                if (res.data.status === 200) {\r\n                    setBusRouteId(res.data.routeId)\r\n                } else setBusRouteId(res.data.routeId)\r\n            })\r\n            .catch((err) => {\r\n                setBusRouteId('')\r\n            })\r\n    }\r\n\r\n    const handleBus = (e) => {\r\n        setStateTitle(\"Click Bus\")\r\n        setBusRoute([]);\r\n        setBusRouteId([]);\r\n        setBusLocate([]);\r\n        clearInterval(IntervalRef.current)\r\n        setBusName(e.target.value);\r\n    }\r\n\r\n    const BusRouteStatusList = async (routeId) => {\r\n        let BusList = [];\r\n        setStateTitle(\"가져오는 중...\")\r\n        await axios.post(\"/api/ArrInfoByRouteList\", { busRouteId: routeId })\r\n            .then((res) => {\r\n                if (res.data.code === 200) {\r\n                    BusList.push(res.data.allRoute[\"ServiceResult\"][\"msgBody\"][\"itemList\"]);\r\n                    if (Array.isArray(BusList[0])) setBusRoute(BusList[0]);\r\n                    else setBusRoute(BusList);\r\n                }\r\n            }).catch((err) => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const getBusPosByRtidList = async (routeId) => {\r\n        let BusList = [];\r\n        await axios.post(\"/api/getBusPosByRtidList\", { busRouteId: routeId })\r\n            .then((res) => {\r\n                if (res.data.code === 200) {\r\n                    BusList.push(res.data.BusLocate[\"ServiceResult\"][\"msgBody\"][\"itemList\"]);\r\n                    if (Array.isArray(BusList[0])) setBusLocate(BusList[0]);\r\n                    else setBusLocate(BusList);\r\n                }\r\n            }).catch((err) => {\r\n                console.log(err)\r\n            })\r\n    }\r\n    \r\n    const getBusArrInfo = async (arsId) => {\r\n        let BusList = [];\r\n        await axios.post(\"/api/ArriveBusList\", { arsID: arsId })\r\n            .then((res) => {\r\n                if (res.data.code === 200) {\r\n                    BusList.push(res.data.arrive[\"ServiceResult\"][\"msgBody\"][\"itemList\"]);\r\n                    if (Array.isArray(BusList[0])) {\r\n                        setArrive(BusList[0])\r\n                    } else {\r\n                        setArrive(BusList)\r\n                    }\r\n                    console.log(BusList)\r\n                }\r\n            }).catch((err) => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const IntervalStationList = (routeId) => {\r\n        setStateTitle(\"Click Bus\")\r\n        clearInterval(IntervalRef.current);\r\n        BusRouteStatusList(routeId)\r\n        getBusPosByRtidList(routeId)\r\n        // IntervalRef.current = setInterval(async () => {\r\n        //     await BusRouteStatusList(routeId)\r\n        // }, 3000)\r\n    }\r\n\r\n    const styleSheet = {\r\n        fontSize: \"15px\",\r\n        color: \"green\"\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <div>\r\n                    <form onSubmit={clickBus}>\r\n                        <input type=\"text\" name='busName' onChange={handleBus}></input>\r\n                        <button type=\"submit\">Bus 조회</button>\r\n                    </form>\r\n                </div>\r\n                <h5>현재 운행 버스: {busLocate.length !== 0 ? busLocate.length + \"개\" : \"\"}</h5>\r\n                {\r\n                    arrive.length !== 0 ?\r\n                        <div>\r\n                            {arrive.map((item, key) => (\r\n                                <ol key={key}>\r\n                                    <li>{item.rtNm[\"_text\"]}</li>\r\n                                    <li>{item.arrmsg1[\"_text\"]}</li>\r\n                                    <li>{item.arrmsg2[\"_text\"]}</li>\r\n                                </ol>\r\n                            ))}\r\n                        </div> : \"\"\r\n                }\r\n                {busRouteId.length !== 0 ?\r\n                    <div>\r\n                        <table>\r\n                            <thead><tr><th>버스명</th></tr></thead>\r\n                            <tbody>\r\n                                {\r\n                                    busRouteId.map((item, key) => (\r\n\r\n                                        <tr key={key}>\r\n                                            <td><button onClick={() => IntervalStationList(item[\"ROUTE_ID\"])}>{item[\"노선명\"]}</button></td>\r\n                                        </tr>\r\n                                    ))\r\n                                }\r\n                            </tbody>\r\n                        </table>\r\n                        {busRoute.length !== 0 ?\r\n                            <div style={styleSheet}>\r\n                                {\r\n                                    // {String(busRouteId[0][\"노선명\"]) + \" / 도착 정보: \" + route.arrmsg1[\"_text\"] + \"/\" + route.arrmsg2[\"_text\"]}\r\n                                    busRoute.map((route, key) => (\r\n                                        <p key={key}>\r\n                                            <button onClick={() => getBusArrInfo(route.arsId[\"_text\"])}>{route.stNm[\"_text\"] + \"  \" }</button>\r\n                                            {\r\n                                                busLocate.findIndex(loc => loc.lastStnId[\"_text\"] === route.stId[\"_text\"]) !== -1 ?\r\n                                                <img src='/static/busImages/bus.png'/> : route.stNm[\"_text\"]\r\n                                            }\r\n                                        </p>\r\n                                    ))\r\n                                }\r\n                            </div> : stateTitle + \"/\" + busRoute.length\r\n                        }\r\n                    </div> : \"\"\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default BusRouteSearch;","D:\\react_nodeExpress\\demo\\src\\search\\BusStationSearch.js",["125","126","127","128","129"],[],"/*global kakao*/\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport KakaoMapScript from '../script/KakaoMapScript';\r\nimport axios from 'axios';\r\n\r\nconst BusStationSearch = () => {\r\n    const [station, setStation] = useState('');\r\n    const [searchTitle, setSerchTitle] = useState('검색요망');\r\n    const [busStation, setBusStation] = useState([]);\r\n    const [searchStationList, setsearchStationList] = useState([]);\r\n\r\n    const clickBusStation = async (e) => {\r\n        e.preventDefault();\r\n        let BusList = [];\r\n        let stationArray = [];\r\n        await axios.post(\"/api/BusStationApi\", { station: station })\r\n            .then((res) => {\r\n                if (res.data.code === 200) {\r\n                    let body = res.data[\"station\"][\"ServiceResult\"][\"msgBody\"]\r\n                    if (\"itemList\" in body) {\r\n                        BusList.push(body.itemList)\r\n                        if (Array.isArray(BusList[0])) {\r\n                            setBusStation(BusList[0]);\r\n                            BusList[0].map((item) => {\r\n                                stationArray.push({\r\n                                    x: item.tmX[\"_text\"],\r\n                                    y: item.tmY[\"_text\"],\r\n                                    stationName: item.stNm[\"_text\"],\r\n                                    arsId: item.arsId[\"_text\"]\r\n                                })\r\n                            })\r\n                            setsearchStationList(stationArray)\r\n                        } else {\r\n                            setBusStation(BusList);\r\n                            BusList.map((item) => {\r\n                                stationArray.push({\r\n                                    x: item.tmX[\"_text\"],\r\n                                    y: item.tmY[\"_text\"],\r\n                                    stationName: item.stNm[\"_text\"],\r\n                                    arsId: item.arsId[\"_text\"]\r\n                                })\r\n                            })\r\n                            setsearchStationList(stationArray)\r\n                        }\r\n                    } else {\r\n                        setSerchTitle(\"검색하신 결과가 존재하지 않습니다.\");\r\n                        setBusStation([]);\r\n                    }\r\n                } else {\r\n                    setSerchTitle(\"검색명 입력하라고 아 ㅋㅋㅋ\");\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                setSerchTitle(\"서버가 돌아가셨습니다. ㅈㅅ\");\r\n                setStation('');\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const handleStation = (e) => {\r\n        setStation(e.target.value);\r\n    }\r\n\r\n    const styleDict = {\r\n        display: \"inline-block\", \r\n        width: \"50%\"\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <div>\r\n                    <form onSubmit={clickBusStation}>\r\n                        <input type=\"text\" name='stationName' onChange={handleStation}></input>\r\n                        <button type=\"submit\">BUS 정류장 조회</button>\r\n                    </form>\r\n                </div>\r\n                {\r\n                    busStation.length !== 0 ?\r\n                        <div style={styleDict}>\r\n                            <div className=\"map_wrap\">\r\n                                <KakaoMapScript searchPlace={searchStationList} />\r\n                            </div>\r\n                        </div>\r\n                        : <h5>{searchTitle}</h5>\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default BusStationSearch;",{"ruleId":"130","severity":1,"message":"131","line":2,"column":27,"nodeType":"132","messageId":"133","endLine":2,"endColumn":36},{"ruleId":"130","severity":1,"message":"134","line":2,"column":38,"nodeType":"132","messageId":"133","endLine":2,"endColumn":44},{"ruleId":"130","severity":1,"message":"131","line":1,"column":27,"nodeType":"132","messageId":"133","endLine":1,"endColumn":36},{"ruleId":"130","severity":1,"message":"134","line":1,"column":38,"nodeType":"132","messageId":"133","endLine":1,"endColumn":44},{"ruleId":"130","severity":1,"message":"135","line":2,"column":8,"nodeType":"132","messageId":"133","endLine":2,"endColumn":13},{"ruleId":"130","severity":1,"message":"136","line":1,"column":10,"nodeType":"137","messageId":"133","endLine":1,"endColumn":15},{"ruleId":"130","severity":1,"message":"131","line":2,"column":27,"nodeType":"132","messageId":"133","endLine":2,"endColumn":36},{"ruleId":"130","severity":1,"message":"134","line":2,"column":38,"nodeType":"132","messageId":"133","endLine":2,"endColumn":44},{"ruleId":"130","severity":1,"message":"135","line":5,"column":8,"nodeType":"132","messageId":"133","endLine":5,"endColumn":13},{"ruleId":"130","severity":1,"message":"138","line":6,"column":12,"nodeType":"132","messageId":"133","endLine":6,"endColumn":28},{"ruleId":"139","severity":1,"message":"140","line":89,"column":37,"nodeType":"141","messageId":"142","endLine":89,"endColumn":39},{"ruleId":"130","severity":1,"message":"143","line":7,"column":13,"nodeType":"132","messageId":"133","endLine":7,"endColumn":17},{"ruleId":"130","severity":1,"message":"134","line":1,"column":38,"nodeType":"132","messageId":"133","endLine":1,"endColumn":44},{"ruleId":"130","severity":1,"message":"144","line":3,"column":8,"nodeType":"132","messageId":"133","endLine":3,"endColumn":19},{"ruleId":"145","severity":1,"message":"146","line":16,"column":8,"nodeType":"147","endLine":16,"endColumn":10,"suggestions":"148"},{"ruleId":"130","severity":1,"message":"134","line":1,"column":38,"nodeType":"132","messageId":"133","endLine":1,"endColumn":44},{"ruleId":"145","severity":1,"message":"149","line":12,"column":8,"nodeType":"147","endLine":12,"endColumn":10,"suggestions":"150"},{"ruleId":"130","severity":1,"message":"151","line":1,"column":8,"nodeType":"132","messageId":"133","endLine":1,"endColumn":13},{"ruleId":"130","severity":1,"message":"152","line":1,"column":17,"nodeType":"132","messageId":"133","endLine":1,"endColumn":25},{"ruleId":"130","severity":1,"message":"131","line":1,"column":27,"nodeType":"132","messageId":"133","endLine":1,"endColumn":36},{"ruleId":"130","severity":1,"message":"134","line":1,"column":38,"nodeType":"132","messageId":"133","endLine":1,"endColumn":44},{"ruleId":"130","severity":1,"message":"144","line":2,"column":8,"nodeType":"132","messageId":"133","endLine":2,"endColumn":19},{"ruleId":"130","severity":1,"message":"135","line":3,"column":8,"nodeType":"132","messageId":"133","endLine":3,"endColumn":13},{"ruleId":"130","severity":1,"message":"153","line":6,"column":50,"nodeType":"132","messageId":"133","endLine":6,"endColumn":57},{"ruleId":"130","severity":1,"message":"154","line":7,"column":10,"nodeType":"132","messageId":"133","endLine":7,"endColumn":22},{"ruleId":"130","severity":1,"message":"155","line":7,"column":24,"nodeType":"132","messageId":"133","endLine":7,"endColumn":39},{"ruleId":"156","severity":1,"message":"157","line":17,"column":15,"nodeType":"158","endLine":17,"endColumn":65},{"ruleId":"130","severity":1,"message":"136","line":1,"column":10,"nodeType":"137","messageId":"133","endLine":1,"endColumn":15},{"ruleId":"145","severity":1,"message":"159","line":16,"column":48,"nodeType":"132","endLine":16,"endColumn":55},{"ruleId":"156","severity":1,"message":"157","line":149,"column":49,"nodeType":"158","endLine":149,"endColumn":87},{"ruleId":"130","severity":1,"message":"136","line":1,"column":10,"nodeType":"137","messageId":"133","endLine":1,"endColumn":15},{"ruleId":"130","severity":1,"message":"131","line":2,"column":27,"nodeType":"132","messageId":"133","endLine":2,"endColumn":36},{"ruleId":"130","severity":1,"message":"134","line":2,"column":38,"nodeType":"132","messageId":"133","endLine":2,"endColumn":44},{"ruleId":"139","severity":1,"message":"140","line":24,"column":51,"nodeType":"141","messageId":"142","endLine":24,"endColumn":53},{"ruleId":"139","severity":1,"message":"140","line":35,"column":48,"nodeType":"141","messageId":"142","endLine":35,"endColumn":50},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'axios' is defined but never used.","'kakao' is defined but never used.","Program","'lastClickStation' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'stNm' is assigned a value but never used.","'useInterval' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'clickStationInfo'. Either include it or remove the dependency array.","ArrayExpression",["160"],"React Hook useEffect has a missing dependency: 'ArriveBusListInfo'. Either include it or remove the dependency array.",["161"],"'React' is defined but never used.","'useState' is defined but never used.","'routeId' is assigned a value but never used.","'BusRouteList' is assigned a value but never used.","'setBusRouteList' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","The ref value 'IntervalRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'IntervalRef.current' to a variable inside the effect, and use that variable in the cleanup function.",{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},"Update the dependencies array to be: [clickStationInfo]",{"range":"166","text":"167"},"Update the dependencies array to be: [ArriveBusListInfo]",{"range":"168","text":"169"},[606,608],"[clickStationInfo]",[390,392],"[ArriveBusListInfo]"]